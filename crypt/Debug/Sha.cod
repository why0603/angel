; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\windows\belial\crypt\Sha.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_PADDING DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
PUBLIC	_ShaInit
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\windows\belial\crypt\sha.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ShaInit
_TEXT	SEGMENT
_pContext$ = 8						; size = 4
_ShaInit PROC						; COMDAT

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 111  : 	pContext->count[0] = 0;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00021	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 112  : 	pContext->count[1] = 0;

  00028	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0002b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 113  : 	pContext->state[0] = A;

  00032	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00035	c7 00 01 23 45
	67		 mov	 DWORD PTR [eax], 1732584193 ; 67452301H

; 114  : 	pContext->state[1] = B;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0003e	c7 40 04 89 ab
	cd ef		 mov	 DWORD PTR [eax+4], -271733879 ; efcdab89H

; 115  : 	pContext->state[2] = C;

  00045	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00048	c7 40 08 fe dc
	ba 98		 mov	 DWORD PTR [eax+8], -1732584194 ; 98badcfeH

; 116  : 	pContext->state[3] = D;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00052	c7 40 0c 76 54
	32 10		 mov	 DWORD PTR [eax+12], 271733878 ; 10325476H

; 117  : 	pContext->state[4] = E;

  00059	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0005c	c7 40 10 f0 e1
	d2 c3		 mov	 DWORD PTR [eax+16], -1009589776 ; c3d2e1f0H

; 118  : }

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_ShaInit ENDP
_TEXT	ENDS
PUBLIC	_ShaUpdate
EXTRN	_memcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ShaUpdate
_TEXT	SEGMENT
_partLen$ = -32						; size = 4
_index$ = -20						; size = 4
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
_pInput$ = 12						; size = 4
_nLen$ = 16						; size = 4
_ShaUpdate PROC						; COMDAT

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 125  : 	unsigned int i, index, partLen;
; 126  : 
; 127  : 	//长度除于8,其实是每次运算需要512位，64*8
; 128  : 	/* Compute number of bytes mod 64 */
; 129  : 	index = (unsigned int)((pContext->count[0] >> 3) & 0x3f);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00021	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00024	c1 e9 03	 shr	 ecx, 3
  00027	83 e1 3f	 and	 ecx, 63			; 0000003fH
  0002a	89 4d ec	 mov	 DWORD PTR _index$[ebp], ecx

; 130  : 
; 131  : 	//需要运算的字节量*8
; 132  : 	pContext->count[0] += ((unsigned int)nLen << 3);

  0002d	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00030	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00033	8b 55 10	 mov	 edx, DWORD PTR _nLen$[ebp]
  00036	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  0003c	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 133  : 
; 134  : 	//这是不是表示溢出了？
; 135  : 	/* Update number of bits */
; 136  : 	if ((pContext->count[0]) < ((unsigned int)nLen << 3))

  0003f	8b 45 10	 mov	 eax, DWORD PTR _nLen$[ebp]
  00042	c1 e0 03	 shl	 eax, 3
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00048	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  0004b	73 0f		 jae	 SHORT $LN6@ShaUpdate

; 137  : 	{
; 138  : 		pContext->count[1]++;

  0004d	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00050	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00053	83 c1 01	 add	 ecx, 1
  00056	8b 55 08	 mov	 edx, DWORD PTR _pContext$[ebp]
  00059	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN6@ShaUpdate:

; 139  : 	}
; 140  : 
; 141  : 	pContext->count[1] += ((unsigned int)nLen >> 29);

  0005c	8b 45 10	 mov	 eax, DWORD PTR _nLen$[ebp]
  0005f	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00065	03 41 18	 add	 eax, DWORD PTR [ecx+24]
  00068	8b 55 08	 mov	 edx, DWORD PTR _pContext$[ebp]
  0006b	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 142  : 
; 143  : 	//需要从新的数据中使用可以用的字符数
; 144  : 	partLen = 64 - index;

  0006e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00073	2b 45 ec	 sub	 eax, DWORD PTR _index$[ebp]
  00076	89 45 e0	 mov	 DWORD PTR _partLen$[ebp], eax

; 145  : 
; 146  : 	/* Transform as many times as possible.
; 147  : 	*/
; 148  : 	if (nLen >= partLen) {

  00079	8b 45 10	 mov	 eax, DWORD PTR _nLen$[ebp]
  0007c	3b 45 e0	 cmp	 eax, DWORD PTR _partLen$[ebp]
  0007f	72 68		 jb	 SHORT $LN5@ShaUpdate

; 149  : 		memcpy(&pContext->buffer[index],pInput,partLen);

  00081	8b 45 e0	 mov	 eax, DWORD PTR _partLen$[ebp]
  00084	50		 push	 eax
  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 ec	 mov	 edx, DWORD PTR _index$[ebp]
  0008c	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0008f	8d 4c 10 1c	 lea	 ecx, DWORD PTR [eax+edx+28]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 _memcpy
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH

; 150  : 		ShaTransform(pContext->state, pContext->buffer);

  0009c	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0009f	83 c0 1c	 add	 eax, 28			; 0000001cH
  000a2	50		 push	 eax
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 _ShaTransform
  000ac	83 c4 08	 add	 esp, 8

; 151  : 
; 152  : 		for (i = partLen; (i + 63) < nLen; i += 64)

  000af	8b 45 e0	 mov	 eax, DWORD PTR _partLen$[ebp]
  000b2	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  000b5	eb 09		 jmp	 SHORT $LN4@ShaUpdate
$LN3@ShaUpdate:
  000b7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ba	83 c0 40	 add	 eax, 64			; 00000040H
  000bd	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@ShaUpdate:
  000c0	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000c3	83 c0 3f	 add	 eax, 63			; 0000003fH
  000c6	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  000c9	73 15		 jae	 SHORT $LN2@ShaUpdate

; 153  : 		{
; 154  : 			ShaTransform(pContext->state, &pInput[i]);

  000cb	8b 45 0c	 mov	 eax, DWORD PTR _pInput$[ebp]
  000ce	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 _ShaTransform
  000db	83 c4 08	 add	 esp, 8

; 155  : 		}

  000de	eb d7		 jmp	 SHORT $LN3@ShaUpdate
$LN2@ShaUpdate:

; 156  : 
; 157  : 		index = 0;

  000e0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0

; 158  : 	}
; 159  : 	else

  000e7	eb 07		 jmp	 SHORT $LN1@ShaUpdate
$LN5@ShaUpdate:

; 160  : 	{
; 161  : 		i = 0;

  000e9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN1@ShaUpdate:

; 162  : 	}
; 163  : 
; 164  : 	/* Buffer remaining input */
; 165  : 	memcpy(&pContext->buffer[index],&pInput[i],nLen-i);

  000f0	8b 45 10	 mov	 eax, DWORD PTR _nLen$[ebp]
  000f3	2b 45 f8	 sub	 eax, DWORD PTR _i$[ebp]
  000f6	50		 push	 eax
  000f7	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  000fa	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  000fd	51		 push	 ecx
  000fe	8b 55 ec	 mov	 edx, DWORD PTR _index$[ebp]
  00101	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00104	8d 4c 10 1c	 lea	 ecx, DWORD PTR [eax+edx+28]
  00108	51		 push	 ecx
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 166  : }

  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0011a	3b ec		 cmp	 ebp, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
_ShaUpdate ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ShaFinal
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ShaFinal
_TEXT	SEGMENT
tv84 = -240						; size = 4
_bits$ = -40						; size = 8
_padLen$ = -24						; size = 4
_index$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
_digest$ = 12						; size = 4
_ShaFinal PROC						; COMDAT

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 172  : 	unsigned int index, padLen;
; 173  : 	unsigned char bits[8]= {0};

  00028	c6 45 d8 00	 mov	 BYTE PTR _bits$[ebp], 0
  0002c	33 c0		 xor	 eax, eax
  0002e	89 45 d9	 mov	 DWORD PTR _bits$[ebp+1], eax
  00031	66 89 45 dd	 mov	 WORD PTR _bits$[ebp+5], ax
  00035	88 45 df	 mov	 BYTE PTR _bits$[ebp+7], al

; 174  : 
; 175  : 	/* Save number of bits */
; 176  : 	//由于使用了小端法，因此....
; 177  : 	Encode(bits, pContext->count+1, 4);

  00038	6a 04		 push	 4
  0003a	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0003d	83 c0 18	 add	 eax, 24			; 00000018H
  00040	50		 push	 eax
  00041	8d 4d d8	 lea	 ecx, DWORD PTR _bits$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _Encode
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 178  : 	Encode(&bits[4], pContext->count, 4);

  0004d	6a 04		 push	 4
  0004f	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00052	83 c0 14	 add	 eax, 20			; 00000014H
  00055	50		 push	 eax
  00056	8d 4d dc	 lea	 ecx, DWORD PTR _bits$[ebp+4]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 _Encode
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 179  : 	//bits[7] = 0x18;
; 180  : 
; 181  : 	/* Pad out to 56 mod 64.
; 182  : 	*/
; 183  : 	index = (unsigned int)((pContext->count[0] >> 3) & 0x3f);

  00062	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00065	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00068	c1 e9 03	 shr	 ecx, 3
  0006b	83 e1 3f	 and	 ecx, 63			; 0000003fH
  0006e	89 4d f4	 mov	 DWORD PTR _index$[ebp], ecx

; 184  : 	padLen = (index < 56) ? (56 - index) : (120 - index);

  00071	83 7d f4 38	 cmp	 DWORD PTR _index$[ebp], 56 ; 00000038H
  00075	73 10		 jae	 SHORT $LN3@ShaFinal
  00077	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0007c	2b 45 f4	 sub	 eax, DWORD PTR _index$[ebp]
  0007f	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  00085	eb 0e		 jmp	 SHORT $LN4@ShaFinal
$LN3@ShaFinal:
  00087	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  0008c	2b 4d f4	 sub	 ecx, DWORD PTR _index$[ebp]
  0008f	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv84[ebp], ecx
$LN4@ShaFinal:
  00095	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv84[ebp]
  0009b	89 55 e8	 mov	 DWORD PTR _padLen$[ebp], edx

; 185  : 	//对填充数据做SHA的80轮运算
; 186  : 	ShaUpdate(pContext, PADDING, padLen);

  0009e	8b 45 e8	 mov	 eax, DWORD PTR _padLen$[ebp]
  000a1	50		 push	 eax
  000a2	68 00 00 00 00	 push	 OFFSET _PADDING
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 _ShaUpdate
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 187  : 
; 188  : 	//填充之前的长度
; 189  : 	ShaUpdate(pContext, bits, 8);

  000b3	6a 08		 push	 8
  000b5	8d 45 d8	 lea	 eax, DWORD PTR _bits$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _ShaUpdate
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 190  : 	/* Store state in digest */
; 191  : 	Encode(digest, pContext->state, 20);

  000c5	6a 14		 push	 20			; 00000014H
  000c7	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d 0c	 mov	 ecx, DWORD PTR _digest$[ebp]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 _Encode
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 192  : 	memset(pContext,0,sizeof(*pContext));//可以注释，除非打算重用

  000d7	6a 5c		 push	 92			; 0000005cH
  000d9	6a 00		 push	 0
  000db	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _memset
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 193  : }

  000e7	52		 push	 edx
  000e8	8b cd		 mov	 ecx, ebp
  000ea	50		 push	 eax
  000eb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@ShaFinal
  000f1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f6	58		 pop	 eax
  000f7	5a		 pop	 edx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fe	33 cd		 xor	 ecx, ebp
  00100	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00105	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0010b	3b ec		 cmp	 ebp, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
  00116	8b ff		 npad	 2
$LN7@ShaFinal:
  00118	01 00 00 00	 DD	 1
  0011c	00 00 00 00	 DD	 $LN6@ShaFinal
$LN6@ShaFinal:
  00120	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00124	08 00 00 00	 DD	 8
  00128	00 00 00 00	 DD	 $LN5@ShaFinal
$LN5@ShaFinal:
  0012c	62		 DB	 98			; 00000062H
  0012d	69		 DB	 105			; 00000069H
  0012e	74		 DB	 116			; 00000074H
  0012f	73		 DB	 115			; 00000073H
  00130	00		 DB	 0
_ShaFinal ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ShaTransform
_TEXT	SEGMENT
tv664 = -788						; size = 4
tv665 = -784						; size = 4
tv632 = -780						; size = 4
tv633 = -776						; size = 4
tv603 = -772						; size = 4
tv604 = -768						; size = 4
tv570 = -764						; size = 4
tv571 = -760						; size = 4
tv572 = -756						; size = 4
tv542 = -752						; size = 4
tv543 = -748						; size = 4
tv544 = -744						; size = 4
tv517 = -740						; size = 4
tv518 = -736						; size = 4
tv519 = -732						; size = 4
tv486 = -728						; size = 4
tv487 = -724						; size = 4
tv454 = -720						; size = 4
tv455 = -716						; size = 4
tv425 = -712						; size = 4
tv426 = -708						; size = 4
tv392 = -704						; size = 4
tv393 = -700						; size = 4
tv394 = -696						; size = 4
tv364 = -692						; size = 4
tv365 = -688						; size = 4
tv366 = -684						; size = 4
tv339 = -680						; size = 4
tv340 = -676						; size = 4
tv341 = -672						; size = 4
tv311 = -668						; size = 4
tv312 = -664						; size = 4
tv279 = -660						; size = 4
tv280 = -656						; size = 4
tv250 = -652						; size = 4
tv251 = -648						; size = 4
tv217 = -644						; size = 4
tv218 = -640						; size = 4
tv219 = -636						; size = 4
tv189 = -632						; size = 4
tv190 = -628						; size = 4
tv191 = -624						; size = 4
tv164 = -620						; size = 4
tv165 = -616						; size = 4
tv166 = -612						; size = 4
_w$ = -412						; size = 320
_e$ = -84						; size = 4
_d$ = -72						; size = 4
_c$ = -60						; size = 4
_b$ = -48						; size = 4
_a$ = -36						; size = 4
_tmp$ = -24						; size = 4
_j$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_block$ = 12						; size = 4
_ShaTransform PROC					; COMDAT

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 03 00
	00		 sub	 esp, 788		; 00000314H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fc ff
	ff		 lea	 edi, DWORD PTR [ebp-788]
  00012	b9 c5 00 00 00	 mov	 ecx, 197		; 000000c5H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 199  : 	unsigned int j,tmp;
; 200  : 	unsigned int a = state[0];

  00028	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	89 4d dc	 mov	 DWORD PTR _a$[ebp], ecx

; 201  : 	unsigned int b = state[1];

  00030	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	89 4d d0	 mov	 DWORD PTR _b$[ebp], ecx

; 202  : 	unsigned int c = state[2];

  00039	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0003c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003f	89 4d c4	 mov	 DWORD PTR _c$[ebp], ecx

; 203  : 	unsigned int d = state[3];

  00042	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00045	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00048	89 4d b8	 mov	 DWORD PTR _d$[ebp], ecx

; 204  : 	unsigned int e = state[4];

  0004b	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0004e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00051	89 4d ac	 mov	 DWORD PTR _e$[ebp], ecx

; 205  : 	unsigned int w[80] = {0};

  00054	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _w$[ebp], 0
  0005e	68 3c 01 00 00	 push	 316			; 0000013cH
  00063	6a 00		 push	 0
  00065	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _w$[ebp+4]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _memset
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 206  : 	Decode(w,block,64);//转前面64个字节为16个整型数组

  00074	6a 40		 push	 64			; 00000040H
  00076	8b 45 0c	 mov	 eax, DWORD PTR _block$[ebp]
  00079	50		 push	 eax
  0007a	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _w$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _Decode
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 207  : 	//memcpy(w,block,64);
; 208  : 	for (j=0; j<80; j++)

  00089	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00090	eb 09		 jmp	 SHORT $LN4@ShaTransfo
$LN3@ShaTransfo:
  00092	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00095	83 c0 01	 add	 eax, 1
  00098	89 45 f4	 mov	 DWORD PTR _j$[ebp], eax
$LN4@ShaTransfo:
  0009b	83 7d f4 50	 cmp	 DWORD PTR _j$[ebp], 80	; 00000050H
  0009f	0f 83 23 0d 00
	00		 jae	 $LN2@ShaTransfo

; 209  : 	{
; 210  : 		if (j >= 16)

  000a5	83 7d f4 10	 cmp	 DWORD PTR _j$[ebp], 16	; 00000010H
  000a9	72 61		 jb	 SHORT $LN1@ShaTransfo

; 211  : 		{
; 212  : 			w[j] = ROTATE_LEFT(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);

  000ab	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  000b1	8b 94 85 58 fe
	ff ff		 mov	 edx, DWORD PTR _w$[ebp+eax*4-12]
  000b8	33 94 8d 44 fe
	ff ff		 xor	 edx, DWORD PTR _w$[ebp+ecx*4-32]
  000bf	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000c2	33 94 85 2c fe
	ff ff		 xor	 edx, DWORD PTR _w$[ebp+eax*4-56]
  000c9	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  000cc	33 94 8d 24 fe
	ff ff		 xor	 edx, DWORD PTR _w$[ebp+ecx*4-64]
  000d3	d1 e2		 shl	 edx, 1
  000d5	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000d8	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  000db	8b 84 85 58 fe
	ff ff		 mov	 eax, DWORD PTR _w$[ebp+eax*4-12]
  000e2	33 84 8d 44 fe
	ff ff		 xor	 eax, DWORD PTR _w$[ebp+ecx*4-32]
  000e9	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  000ec	33 84 8d 2c fe
	ff ff		 xor	 eax, DWORD PTR _w$[ebp+ecx*4-56]
  000f3	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  000f6	33 84 8d 24 fe
	ff ff		 xor	 eax, DWORD PTR _w$[ebp+ecx*4-64]
  000fd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00100	0b d0		 or	 edx, eax
  00102	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00105	89 94 85 64 fe
	ff ff		 mov	 DWORD PTR _w$[ebp+eax*4], edx
$LN1@ShaTransfo:

; 213  : 		}
; 214  : 		tmp = SHA1_ADD(SHA1_ADD(ROTATE_LEFT(a, 5), SHA1_FT(j, b, c, d)),SHA1_ADD(SHA1_ADD(e, w[j]), SHA1_KT(j)));

  0010c	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  00110	73 18		 jae	 SHORT $LN11@ShaTransfo
  00112	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00115	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  00118	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  0011b	f7 d1		 not	 ecx
  0011d	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  00120	0b c1		 or	 eax, ecx
  00122	89 85 9c fd ff
	ff		 mov	 DWORD PTR tv166[ebp], eax
  00128	eb 62		 jmp	 SHORT $LN12@ShaTransfo
$LN11@ShaTransfo:
  0012a	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  0012e	73 11		 jae	 SHORT $LN9@ShaTransfo
  00130	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  00133	33 55 c4	 xor	 edx, DWORD PTR _c$[ebp]
  00136	33 55 b8	 xor	 edx, DWORD PTR _d$[ebp]
  00139	89 95 98 fd ff
	ff		 mov	 DWORD PTR tv165[ebp], edx
  0013f	eb 3f		 jmp	 SHORT $LN10@ShaTransfo
$LN9@ShaTransfo:
  00141	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  00145	73 1e		 jae	 SHORT $LN7@ShaTransfo
  00147	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  0014a	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  0014d	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  00150	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  00153	0b c1		 or	 eax, ecx
  00155	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  00158	23 55 b8	 and	 edx, DWORD PTR _d$[ebp]
  0015b	0b c2		 or	 eax, edx
  0015d	89 85 94 fd ff
	ff		 mov	 DWORD PTR tv164[ebp], eax
  00163	eb 0f		 jmp	 SHORT $LN8@ShaTransfo
$LN7@ShaTransfo:
  00165	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00168	33 45 c4	 xor	 eax, DWORD PTR _c$[ebp]
  0016b	33 45 b8	 xor	 eax, DWORD PTR _d$[ebp]
  0016e	89 85 94 fd ff
	ff		 mov	 DWORD PTR tv164[ebp], eax
$LN8@ShaTransfo:
  00174	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR tv164[ebp]
  0017a	89 8d 98 fd ff
	ff		 mov	 DWORD PTR tv165[ebp], ecx
$LN10@ShaTransfo:
  00180	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR tv165[ebp]
  00186	89 95 9c fd ff
	ff		 mov	 DWORD PTR tv166[ebp], edx
$LN12@ShaTransfo:
  0018c	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  00190	73 18		 jae	 SHORT $LN17@ShaTransfo
  00192	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00195	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  00198	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  0019b	f7 d1		 not	 ecx
  0019d	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  001a0	0b c1		 or	 eax, ecx
  001a2	89 85 90 fd ff
	ff		 mov	 DWORD PTR tv191[ebp], eax
  001a8	eb 62		 jmp	 SHORT $LN18@ShaTransfo
$LN17@ShaTransfo:
  001aa	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  001ae	73 11		 jae	 SHORT $LN15@ShaTransfo
  001b0	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  001b3	33 55 c4	 xor	 edx, DWORD PTR _c$[ebp]
  001b6	33 55 b8	 xor	 edx, DWORD PTR _d$[ebp]
  001b9	89 95 8c fd ff
	ff		 mov	 DWORD PTR tv190[ebp], edx
  001bf	eb 3f		 jmp	 SHORT $LN16@ShaTransfo
$LN15@ShaTransfo:
  001c1	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  001c5	73 1e		 jae	 SHORT $LN13@ShaTransfo
  001c7	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  001ca	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  001cd	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  001d0	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  001d3	0b c1		 or	 eax, ecx
  001d5	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  001d8	23 55 b8	 and	 edx, DWORD PTR _d$[ebp]
  001db	0b c2		 or	 eax, edx
  001dd	89 85 88 fd ff
	ff		 mov	 DWORD PTR tv189[ebp], eax
  001e3	eb 0f		 jmp	 SHORT $LN14@ShaTransfo
$LN13@ShaTransfo:
  001e5	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  001e8	33 45 c4	 xor	 eax, DWORD PTR _c$[ebp]
  001eb	33 45 b8	 xor	 eax, DWORD PTR _d$[ebp]
  001ee	89 85 88 fd ff
	ff		 mov	 DWORD PTR tv189[ebp], eax
$LN14@ShaTransfo:
  001f4	8b 8d 88 fd ff
	ff		 mov	 ecx, DWORD PTR tv189[ebp]
  001fa	89 8d 8c fd ff
	ff		 mov	 DWORD PTR tv190[ebp], ecx
$LN16@ShaTransfo:
  00200	8b 95 8c fd ff
	ff		 mov	 edx, DWORD PTR tv190[ebp]
  00206	89 95 90 fd ff
	ff		 mov	 DWORD PTR tv191[ebp], edx
$LN18@ShaTransfo:
  0020c	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  00210	73 18		 jae	 SHORT $LN23@ShaTransfo
  00212	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00215	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  00218	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  0021b	f7 d1		 not	 ecx
  0021d	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  00220	0b c1		 or	 eax, ecx
  00222	89 85 84 fd ff
	ff		 mov	 DWORD PTR tv219[ebp], eax
  00228	eb 62		 jmp	 SHORT $LN24@ShaTransfo
$LN23@ShaTransfo:
  0022a	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  0022e	73 11		 jae	 SHORT $LN21@ShaTransfo
  00230	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  00233	33 55 c4	 xor	 edx, DWORD PTR _c$[ebp]
  00236	33 55 b8	 xor	 edx, DWORD PTR _d$[ebp]
  00239	89 95 80 fd ff
	ff		 mov	 DWORD PTR tv218[ebp], edx
  0023f	eb 3f		 jmp	 SHORT $LN22@ShaTransfo
$LN21@ShaTransfo:
  00241	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  00245	73 1e		 jae	 SHORT $LN19@ShaTransfo
  00247	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  0024a	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  0024d	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  00250	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  00253	0b c1		 or	 eax, ecx
  00255	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  00258	23 55 b8	 and	 edx, DWORD PTR _d$[ebp]
  0025b	0b c2		 or	 eax, edx
  0025d	89 85 7c fd ff
	ff		 mov	 DWORD PTR tv217[ebp], eax
  00263	eb 0f		 jmp	 SHORT $LN20@ShaTransfo
$LN19@ShaTransfo:
  00265	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00268	33 45 c4	 xor	 eax, DWORD PTR _c$[ebp]
  0026b	33 45 b8	 xor	 eax, DWORD PTR _d$[ebp]
  0026e	89 85 7c fd ff
	ff		 mov	 DWORD PTR tv217[ebp], eax
$LN20@ShaTransfo:
  00274	8b 8d 7c fd ff
	ff		 mov	 ecx, DWORD PTR tv217[ebp]
  0027a	89 8d 80 fd ff
	ff		 mov	 DWORD PTR tv218[ebp], ecx
$LN22@ShaTransfo:
  00280	8b 95 80 fd ff
	ff		 mov	 edx, DWORD PTR tv218[ebp]
  00286	89 95 84 fd ff
	ff		 mov	 DWORD PTR tv219[ebp], edx
$LN24@ShaTransfo:
  0028c	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  00290	73 0c		 jae	 SHORT $LN27@ShaTransfo
  00292	c7 85 78 fd ff
	ff 99 79 82 5a	 mov	 DWORD PTR tv251[ebp], 1518500249 ; 5a827999H
  0029c	eb 34		 jmp	 SHORT $LN28@ShaTransfo
$LN27@ShaTransfo:
  0029e	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  002a2	73 0c		 jae	 SHORT $LN25@ShaTransfo
  002a4	c7 85 74 fd ff
	ff a1 eb d9 6e	 mov	 DWORD PTR tv250[ebp], 1859775393 ; 6ed9eba1H
  002ae	eb 16		 jmp	 SHORT $LN26@ShaTransfo
$LN25@ShaTransfo:
  002b0	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  002b4	1b c0		 sbb	 eax, eax
  002b6	25 06 fb b8 c4	 and	 eax, -994510074		; c4b8fb06H
  002bb	05 d6 c1 62 ca	 add	 eax, -899497514		; ca62c1d6H
  002c0	89 85 74 fd ff
	ff		 mov	 DWORD PTR tv250[ebp], eax
$LN26@ShaTransfo:
  002c6	8b 8d 74 fd ff
	ff		 mov	 ecx, DWORD PTR tv250[ebp]
  002cc	89 8d 78 fd ff
	ff		 mov	 DWORD PTR tv251[ebp], ecx
$LN28@ShaTransfo:
  002d2	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  002d6	73 0c		 jae	 SHORT $LN31@ShaTransfo
  002d8	c7 85 70 fd ff
	ff 99 79 82 5a	 mov	 DWORD PTR tv280[ebp], 1518500249 ; 5a827999H
  002e2	eb 36		 jmp	 SHORT $LN32@ShaTransfo
$LN31@ShaTransfo:
  002e4	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  002e8	73 0c		 jae	 SHORT $LN29@ShaTransfo
  002ea	c7 85 6c fd ff
	ff a1 eb d9 6e	 mov	 DWORD PTR tv279[ebp], 1859775393 ; 6ed9eba1H
  002f4	eb 18		 jmp	 SHORT $LN30@ShaTransfo
$LN29@ShaTransfo:
  002f6	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  002fa	1b d2		 sbb	 edx, edx
  002fc	81 e2 06 fb b8
	c4		 and	 edx, -994510074		; c4b8fb06H
  00302	81 c2 d6 c1 62
	ca		 add	 edx, -899497514		; ca62c1d6H
  00308	89 95 6c fd ff
	ff		 mov	 DWORD PTR tv279[ebp], edx
$LN30@ShaTransfo:
  0030e	8b 85 6c fd ff
	ff		 mov	 eax, DWORD PTR tv279[ebp]
  00314	89 85 70 fd ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
$LN32@ShaTransfo:
  0031a	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  0031e	73 0c		 jae	 SHORT $LN35@ShaTransfo
  00320	c7 85 68 fd ff
	ff 99 79 82 5a	 mov	 DWORD PTR tv312[ebp], 1518500249 ; 5a827999H
  0032a	eb 36		 jmp	 SHORT $LN36@ShaTransfo
$LN35@ShaTransfo:
  0032c	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  00330	73 0c		 jae	 SHORT $LN33@ShaTransfo
  00332	c7 85 64 fd ff
	ff a1 eb d9 6e	 mov	 DWORD PTR tv311[ebp], 1859775393 ; 6ed9eba1H
  0033c	eb 18		 jmp	 SHORT $LN34@ShaTransfo
$LN33@ShaTransfo:
  0033e	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  00342	1b c9		 sbb	 ecx, ecx
  00344	81 e1 06 fb b8
	c4		 and	 ecx, -994510074		; c4b8fb06H
  0034a	81 c1 d6 c1 62
	ca		 add	 ecx, -899497514		; ca62c1d6H
  00350	89 8d 64 fd ff
	ff		 mov	 DWORD PTR tv311[ebp], ecx
$LN34@ShaTransfo:
  00356	8b 95 64 fd ff
	ff		 mov	 edx, DWORD PTR tv311[ebp]
  0035c	89 95 68 fd ff
	ff		 mov	 DWORD PTR tv312[ebp], edx
$LN36@ShaTransfo:
  00362	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  00366	73 18		 jae	 SHORT $LN41@ShaTransfo
  00368	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  0036b	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  0036e	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  00371	f7 d1		 not	 ecx
  00373	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  00376	0b c1		 or	 eax, ecx
  00378	89 85 60 fd ff
	ff		 mov	 DWORD PTR tv341[ebp], eax
  0037e	eb 62		 jmp	 SHORT $LN42@ShaTransfo
$LN41@ShaTransfo:
  00380	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  00384	73 11		 jae	 SHORT $LN39@ShaTransfo
  00386	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  00389	33 55 c4	 xor	 edx, DWORD PTR _c$[ebp]
  0038c	33 55 b8	 xor	 edx, DWORD PTR _d$[ebp]
  0038f	89 95 5c fd ff
	ff		 mov	 DWORD PTR tv340[ebp], edx
  00395	eb 3f		 jmp	 SHORT $LN40@ShaTransfo
$LN39@ShaTransfo:
  00397	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  0039b	73 1e		 jae	 SHORT $LN37@ShaTransfo
  0039d	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  003a0	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  003a3	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  003a6	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  003a9	0b c1		 or	 eax, ecx
  003ab	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  003ae	23 55 b8	 and	 edx, DWORD PTR _d$[ebp]
  003b1	0b c2		 or	 eax, edx
  003b3	89 85 58 fd ff
	ff		 mov	 DWORD PTR tv339[ebp], eax
  003b9	eb 0f		 jmp	 SHORT $LN38@ShaTransfo
$LN37@ShaTransfo:
  003bb	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  003be	33 45 c4	 xor	 eax, DWORD PTR _c$[ebp]
  003c1	33 45 b8	 xor	 eax, DWORD PTR _d$[ebp]
  003c4	89 85 58 fd ff
	ff		 mov	 DWORD PTR tv339[ebp], eax
$LN38@ShaTransfo:
  003ca	8b 8d 58 fd ff
	ff		 mov	 ecx, DWORD PTR tv339[ebp]
  003d0	89 8d 5c fd ff
	ff		 mov	 DWORD PTR tv340[ebp], ecx
$LN40@ShaTransfo:
  003d6	8b 95 5c fd ff
	ff		 mov	 edx, DWORD PTR tv340[ebp]
  003dc	89 95 60 fd ff
	ff		 mov	 DWORD PTR tv341[ebp], edx
$LN42@ShaTransfo:
  003e2	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  003e6	73 18		 jae	 SHORT $LN47@ShaTransfo
  003e8	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  003eb	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  003ee	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  003f1	f7 d1		 not	 ecx
  003f3	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  003f6	0b c1		 or	 eax, ecx
  003f8	89 85 54 fd ff
	ff		 mov	 DWORD PTR tv366[ebp], eax
  003fe	eb 62		 jmp	 SHORT $LN48@ShaTransfo
$LN47@ShaTransfo:
  00400	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  00404	73 11		 jae	 SHORT $LN45@ShaTransfo
  00406	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  00409	33 55 c4	 xor	 edx, DWORD PTR _c$[ebp]
  0040c	33 55 b8	 xor	 edx, DWORD PTR _d$[ebp]
  0040f	89 95 50 fd ff
	ff		 mov	 DWORD PTR tv365[ebp], edx
  00415	eb 3f		 jmp	 SHORT $LN46@ShaTransfo
$LN45@ShaTransfo:
  00417	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  0041b	73 1e		 jae	 SHORT $LN43@ShaTransfo
  0041d	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00420	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  00423	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  00426	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  00429	0b c1		 or	 eax, ecx
  0042b	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  0042e	23 55 b8	 and	 edx, DWORD PTR _d$[ebp]
  00431	0b c2		 or	 eax, edx
  00433	89 85 4c fd ff
	ff		 mov	 DWORD PTR tv364[ebp], eax
  00439	eb 0f		 jmp	 SHORT $LN44@ShaTransfo
$LN43@ShaTransfo:
  0043b	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  0043e	33 45 c4	 xor	 eax, DWORD PTR _c$[ebp]
  00441	33 45 b8	 xor	 eax, DWORD PTR _d$[ebp]
  00444	89 85 4c fd ff
	ff		 mov	 DWORD PTR tv364[ebp], eax
$LN44@ShaTransfo:
  0044a	8b 8d 4c fd ff
	ff		 mov	 ecx, DWORD PTR tv364[ebp]
  00450	89 8d 50 fd ff
	ff		 mov	 DWORD PTR tv365[ebp], ecx
$LN46@ShaTransfo:
  00456	8b 95 50 fd ff
	ff		 mov	 edx, DWORD PTR tv365[ebp]
  0045c	89 95 54 fd ff
	ff		 mov	 DWORD PTR tv366[ebp], edx
$LN48@ShaTransfo:
  00462	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  00466	73 18		 jae	 SHORT $LN53@ShaTransfo
  00468	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  0046b	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  0046e	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  00471	f7 d1		 not	 ecx
  00473	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  00476	0b c1		 or	 eax, ecx
  00478	89 85 48 fd ff
	ff		 mov	 DWORD PTR tv394[ebp], eax
  0047e	eb 62		 jmp	 SHORT $LN54@ShaTransfo
$LN53@ShaTransfo:
  00480	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  00484	73 11		 jae	 SHORT $LN51@ShaTransfo
  00486	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  00489	33 55 c4	 xor	 edx, DWORD PTR _c$[ebp]
  0048c	33 55 b8	 xor	 edx, DWORD PTR _d$[ebp]
  0048f	89 95 44 fd ff
	ff		 mov	 DWORD PTR tv393[ebp], edx
  00495	eb 3f		 jmp	 SHORT $LN52@ShaTransfo
$LN51@ShaTransfo:
  00497	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  0049b	73 1e		 jae	 SHORT $LN49@ShaTransfo
  0049d	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  004a0	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  004a3	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  004a6	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  004a9	0b c1		 or	 eax, ecx
  004ab	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  004ae	23 55 b8	 and	 edx, DWORD PTR _d$[ebp]
  004b1	0b c2		 or	 eax, edx
  004b3	89 85 40 fd ff
	ff		 mov	 DWORD PTR tv392[ebp], eax
  004b9	eb 0f		 jmp	 SHORT $LN50@ShaTransfo
$LN49@ShaTransfo:
  004bb	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  004be	33 45 c4	 xor	 eax, DWORD PTR _c$[ebp]
  004c1	33 45 b8	 xor	 eax, DWORD PTR _d$[ebp]
  004c4	89 85 40 fd ff
	ff		 mov	 DWORD PTR tv392[ebp], eax
$LN50@ShaTransfo:
  004ca	8b 8d 40 fd ff
	ff		 mov	 ecx, DWORD PTR tv392[ebp]
  004d0	89 8d 44 fd ff
	ff		 mov	 DWORD PTR tv393[ebp], ecx
$LN52@ShaTransfo:
  004d6	8b 95 44 fd ff
	ff		 mov	 edx, DWORD PTR tv393[ebp]
  004dc	89 95 48 fd ff
	ff		 mov	 DWORD PTR tv394[ebp], edx
$LN54@ShaTransfo:
  004e2	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  004e6	73 0c		 jae	 SHORT $LN57@ShaTransfo
  004e8	c7 85 3c fd ff
	ff 99 79 82 5a	 mov	 DWORD PTR tv426[ebp], 1518500249 ; 5a827999H
  004f2	eb 34		 jmp	 SHORT $LN58@ShaTransfo
$LN57@ShaTransfo:
  004f4	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  004f8	73 0c		 jae	 SHORT $LN55@ShaTransfo
  004fa	c7 85 38 fd ff
	ff a1 eb d9 6e	 mov	 DWORD PTR tv425[ebp], 1859775393 ; 6ed9eba1H
  00504	eb 16		 jmp	 SHORT $LN56@ShaTransfo
$LN55@ShaTransfo:
  00506	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  0050a	1b c0		 sbb	 eax, eax
  0050c	25 06 fb b8 c4	 and	 eax, -994510074		; c4b8fb06H
  00511	05 d6 c1 62 ca	 add	 eax, -899497514		; ca62c1d6H
  00516	89 85 38 fd ff
	ff		 mov	 DWORD PTR tv425[ebp], eax
$LN56@ShaTransfo:
  0051c	8b 8d 38 fd ff
	ff		 mov	 ecx, DWORD PTR tv425[ebp]
  00522	89 8d 3c fd ff
	ff		 mov	 DWORD PTR tv426[ebp], ecx
$LN58@ShaTransfo:
  00528	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  0052c	73 0c		 jae	 SHORT $LN61@ShaTransfo
  0052e	c7 85 34 fd ff
	ff 99 79 82 5a	 mov	 DWORD PTR tv455[ebp], 1518500249 ; 5a827999H
  00538	eb 36		 jmp	 SHORT $LN62@ShaTransfo
$LN61@ShaTransfo:
  0053a	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  0053e	73 0c		 jae	 SHORT $LN59@ShaTransfo
  00540	c7 85 30 fd ff
	ff a1 eb d9 6e	 mov	 DWORD PTR tv454[ebp], 1859775393 ; 6ed9eba1H
  0054a	eb 18		 jmp	 SHORT $LN60@ShaTransfo
$LN59@ShaTransfo:
  0054c	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  00550	1b d2		 sbb	 edx, edx
  00552	81 e2 06 fb b8
	c4		 and	 edx, -994510074		; c4b8fb06H
  00558	81 c2 d6 c1 62
	ca		 add	 edx, -899497514		; ca62c1d6H
  0055e	89 95 30 fd ff
	ff		 mov	 DWORD PTR tv454[ebp], edx
$LN60@ShaTransfo:
  00564	8b 85 30 fd ff
	ff		 mov	 eax, DWORD PTR tv454[ebp]
  0056a	89 85 34 fd ff
	ff		 mov	 DWORD PTR tv455[ebp], eax
$LN62@ShaTransfo:
  00570	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  00574	73 0c		 jae	 SHORT $LN65@ShaTransfo
  00576	c7 85 2c fd ff
	ff 99 79 82 5a	 mov	 DWORD PTR tv487[ebp], 1518500249 ; 5a827999H
  00580	eb 36		 jmp	 SHORT $LN66@ShaTransfo
$LN65@ShaTransfo:
  00582	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  00586	73 0c		 jae	 SHORT $LN63@ShaTransfo
  00588	c7 85 28 fd ff
	ff a1 eb d9 6e	 mov	 DWORD PTR tv486[ebp], 1859775393 ; 6ed9eba1H
  00592	eb 18		 jmp	 SHORT $LN64@ShaTransfo
$LN63@ShaTransfo:
  00594	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  00598	1b c9		 sbb	 ecx, ecx
  0059a	81 e1 06 fb b8
	c4		 and	 ecx, -994510074		; c4b8fb06H
  005a0	81 c1 d6 c1 62
	ca		 add	 ecx, -899497514		; ca62c1d6H
  005a6	89 8d 28 fd ff
	ff		 mov	 DWORD PTR tv486[ebp], ecx
$LN64@ShaTransfo:
  005ac	8b 95 28 fd ff
	ff		 mov	 edx, DWORD PTR tv486[ebp]
  005b2	89 95 2c fd ff
	ff		 mov	 DWORD PTR tv487[ebp], edx
$LN66@ShaTransfo:
  005b8	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  005bc	73 18		 jae	 SHORT $LN71@ShaTransfo
  005be	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  005c1	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  005c4	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  005c7	f7 d1		 not	 ecx
  005c9	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  005cc	0b c1		 or	 eax, ecx
  005ce	89 85 24 fd ff
	ff		 mov	 DWORD PTR tv519[ebp], eax
  005d4	eb 62		 jmp	 SHORT $LN72@ShaTransfo
$LN71@ShaTransfo:
  005d6	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  005da	73 11		 jae	 SHORT $LN69@ShaTransfo
  005dc	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  005df	33 55 c4	 xor	 edx, DWORD PTR _c$[ebp]
  005e2	33 55 b8	 xor	 edx, DWORD PTR _d$[ebp]
  005e5	89 95 20 fd ff
	ff		 mov	 DWORD PTR tv518[ebp], edx
  005eb	eb 3f		 jmp	 SHORT $LN70@ShaTransfo
$LN69@ShaTransfo:
  005ed	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  005f1	73 1e		 jae	 SHORT $LN67@ShaTransfo
  005f3	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  005f6	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  005f9	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  005fc	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  005ff	0b c1		 or	 eax, ecx
  00601	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  00604	23 55 b8	 and	 edx, DWORD PTR _d$[ebp]
  00607	0b c2		 or	 eax, edx
  00609	89 85 1c fd ff
	ff		 mov	 DWORD PTR tv517[ebp], eax
  0060f	eb 0f		 jmp	 SHORT $LN68@ShaTransfo
$LN67@ShaTransfo:
  00611	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00614	33 45 c4	 xor	 eax, DWORD PTR _c$[ebp]
  00617	33 45 b8	 xor	 eax, DWORD PTR _d$[ebp]
  0061a	89 85 1c fd ff
	ff		 mov	 DWORD PTR tv517[ebp], eax
$LN68@ShaTransfo:
  00620	8b 8d 1c fd ff
	ff		 mov	 ecx, DWORD PTR tv517[ebp]
  00626	89 8d 20 fd ff
	ff		 mov	 DWORD PTR tv518[ebp], ecx
$LN70@ShaTransfo:
  0062c	8b 95 20 fd ff
	ff		 mov	 edx, DWORD PTR tv518[ebp]
  00632	89 95 24 fd ff
	ff		 mov	 DWORD PTR tv519[ebp], edx
$LN72@ShaTransfo:
  00638	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  0063c	73 18		 jae	 SHORT $LN77@ShaTransfo
  0063e	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00641	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  00644	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  00647	f7 d1		 not	 ecx
  00649	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  0064c	0b c1		 or	 eax, ecx
  0064e	89 85 18 fd ff
	ff		 mov	 DWORD PTR tv544[ebp], eax
  00654	eb 62		 jmp	 SHORT $LN78@ShaTransfo
$LN77@ShaTransfo:
  00656	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  0065a	73 11		 jae	 SHORT $LN75@ShaTransfo
  0065c	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  0065f	33 55 c4	 xor	 edx, DWORD PTR _c$[ebp]
  00662	33 55 b8	 xor	 edx, DWORD PTR _d$[ebp]
  00665	89 95 14 fd ff
	ff		 mov	 DWORD PTR tv543[ebp], edx
  0066b	eb 3f		 jmp	 SHORT $LN76@ShaTransfo
$LN75@ShaTransfo:
  0066d	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  00671	73 1e		 jae	 SHORT $LN73@ShaTransfo
  00673	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00676	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  00679	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  0067c	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  0067f	0b c1		 or	 eax, ecx
  00681	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  00684	23 55 b8	 and	 edx, DWORD PTR _d$[ebp]
  00687	0b c2		 or	 eax, edx
  00689	89 85 10 fd ff
	ff		 mov	 DWORD PTR tv542[ebp], eax
  0068f	eb 0f		 jmp	 SHORT $LN74@ShaTransfo
$LN73@ShaTransfo:
  00691	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00694	33 45 c4	 xor	 eax, DWORD PTR _c$[ebp]
  00697	33 45 b8	 xor	 eax, DWORD PTR _d$[ebp]
  0069a	89 85 10 fd ff
	ff		 mov	 DWORD PTR tv542[ebp], eax
$LN74@ShaTransfo:
  006a0	8b 8d 10 fd ff
	ff		 mov	 ecx, DWORD PTR tv542[ebp]
  006a6	89 8d 14 fd ff
	ff		 mov	 DWORD PTR tv543[ebp], ecx
$LN76@ShaTransfo:
  006ac	8b 95 14 fd ff
	ff		 mov	 edx, DWORD PTR tv543[ebp]
  006b2	89 95 18 fd ff
	ff		 mov	 DWORD PTR tv544[ebp], edx
$LN78@ShaTransfo:
  006b8	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  006bc	73 18		 jae	 SHORT $LN83@ShaTransfo
  006be	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  006c1	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  006c4	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  006c7	f7 d1		 not	 ecx
  006c9	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  006cc	0b c1		 or	 eax, ecx
  006ce	89 85 0c fd ff
	ff		 mov	 DWORD PTR tv572[ebp], eax
  006d4	eb 62		 jmp	 SHORT $LN84@ShaTransfo
$LN83@ShaTransfo:
  006d6	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  006da	73 11		 jae	 SHORT $LN81@ShaTransfo
  006dc	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  006df	33 55 c4	 xor	 edx, DWORD PTR _c$[ebp]
  006e2	33 55 b8	 xor	 edx, DWORD PTR _d$[ebp]
  006e5	89 95 08 fd ff
	ff		 mov	 DWORD PTR tv571[ebp], edx
  006eb	eb 3f		 jmp	 SHORT $LN82@ShaTransfo
$LN81@ShaTransfo:
  006ed	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  006f1	73 1e		 jae	 SHORT $LN79@ShaTransfo
  006f3	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  006f6	23 45 c4	 and	 eax, DWORD PTR _c$[ebp]
  006f9	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  006fc	23 4d b8	 and	 ecx, DWORD PTR _d$[ebp]
  006ff	0b c1		 or	 eax, ecx
  00701	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  00704	23 55 b8	 and	 edx, DWORD PTR _d$[ebp]
  00707	0b c2		 or	 eax, edx
  00709	89 85 04 fd ff
	ff		 mov	 DWORD PTR tv570[ebp], eax
  0070f	eb 0f		 jmp	 SHORT $LN80@ShaTransfo
$LN79@ShaTransfo:
  00711	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00714	33 45 c4	 xor	 eax, DWORD PTR _c$[ebp]
  00717	33 45 b8	 xor	 eax, DWORD PTR _d$[ebp]
  0071a	89 85 04 fd ff
	ff		 mov	 DWORD PTR tv570[ebp], eax
$LN80@ShaTransfo:
  00720	8b 8d 04 fd ff
	ff		 mov	 ecx, DWORD PTR tv570[ebp]
  00726	89 8d 08 fd ff
	ff		 mov	 DWORD PTR tv571[ebp], ecx
$LN82@ShaTransfo:
  0072c	8b 95 08 fd ff
	ff		 mov	 edx, DWORD PTR tv571[ebp]
  00732	89 95 0c fd ff
	ff		 mov	 DWORD PTR tv572[ebp], edx
$LN84@ShaTransfo:
  00738	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  0073c	73 0c		 jae	 SHORT $LN87@ShaTransfo
  0073e	c7 85 00 fd ff
	ff 99 79 82 5a	 mov	 DWORD PTR tv604[ebp], 1518500249 ; 5a827999H
  00748	eb 34		 jmp	 SHORT $LN88@ShaTransfo
$LN87@ShaTransfo:
  0074a	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  0074e	73 0c		 jae	 SHORT $LN85@ShaTransfo
  00750	c7 85 fc fc ff
	ff a1 eb d9 6e	 mov	 DWORD PTR tv603[ebp], 1859775393 ; 6ed9eba1H
  0075a	eb 16		 jmp	 SHORT $LN86@ShaTransfo
$LN85@ShaTransfo:
  0075c	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  00760	1b c0		 sbb	 eax, eax
  00762	25 06 fb b8 c4	 and	 eax, -994510074		; c4b8fb06H
  00767	05 d6 c1 62 ca	 add	 eax, -899497514		; ca62c1d6H
  0076c	89 85 fc fc ff
	ff		 mov	 DWORD PTR tv603[ebp], eax
$LN86@ShaTransfo:
  00772	8b 8d fc fc ff
	ff		 mov	 ecx, DWORD PTR tv603[ebp]
  00778	89 8d 00 fd ff
	ff		 mov	 DWORD PTR tv604[ebp], ecx
$LN88@ShaTransfo:
  0077e	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  00782	73 0c		 jae	 SHORT $LN91@ShaTransfo
  00784	c7 85 f8 fc ff
	ff 99 79 82 5a	 mov	 DWORD PTR tv633[ebp], 1518500249 ; 5a827999H
  0078e	eb 36		 jmp	 SHORT $LN92@ShaTransfo
$LN91@ShaTransfo:
  00790	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  00794	73 0c		 jae	 SHORT $LN89@ShaTransfo
  00796	c7 85 f4 fc ff
	ff a1 eb d9 6e	 mov	 DWORD PTR tv632[ebp], 1859775393 ; 6ed9eba1H
  007a0	eb 18		 jmp	 SHORT $LN90@ShaTransfo
$LN89@ShaTransfo:
  007a2	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  007a6	1b d2		 sbb	 edx, edx
  007a8	81 e2 06 fb b8
	c4		 and	 edx, -994510074		; c4b8fb06H
  007ae	81 c2 d6 c1 62
	ca		 add	 edx, -899497514		; ca62c1d6H
  007b4	89 95 f4 fc ff
	ff		 mov	 DWORD PTR tv632[ebp], edx
$LN90@ShaTransfo:
  007ba	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR tv632[ebp]
  007c0	89 85 f8 fc ff
	ff		 mov	 DWORD PTR tv633[ebp], eax
$LN92@ShaTransfo:
  007c6	83 7d f4 14	 cmp	 DWORD PTR _j$[ebp], 20	; 00000014H
  007ca	73 0c		 jae	 SHORT $LN95@ShaTransfo
  007cc	c7 85 f0 fc ff
	ff 99 79 82 5a	 mov	 DWORD PTR tv665[ebp], 1518500249 ; 5a827999H
  007d6	eb 36		 jmp	 SHORT $LN96@ShaTransfo
$LN95@ShaTransfo:
  007d8	83 7d f4 28	 cmp	 DWORD PTR _j$[ebp], 40	; 00000028H
  007dc	73 0c		 jae	 SHORT $LN93@ShaTransfo
  007de	c7 85 ec fc ff
	ff a1 eb d9 6e	 mov	 DWORD PTR tv664[ebp], 1859775393 ; 6ed9eba1H
  007e8	eb 18		 jmp	 SHORT $LN94@ShaTransfo
$LN93@ShaTransfo:
  007ea	83 7d f4 3c	 cmp	 DWORD PTR _j$[ebp], 60	; 0000003cH
  007ee	1b c9		 sbb	 ecx, ecx
  007f0	81 e1 06 fb b8
	c4		 and	 ecx, -994510074		; c4b8fb06H
  007f6	81 c1 d6 c1 62
	ca		 add	 ecx, -899497514		; ca62c1d6H
  007fc	89 8d ec fc ff
	ff		 mov	 DWORD PTR tv664[ebp], ecx
$LN94@ShaTransfo:
  00802	8b 95 ec fc ff
	ff		 mov	 edx, DWORD PTR tv664[ebp]
  00808	89 95 f0 fc ff
	ff		 mov	 DWORD PTR tv665[ebp], edx
$LN96@ShaTransfo:
  0080e	8b 45 dc	 mov	 eax, DWORD PTR _a$[ebp]
  00811	c1 e0 05	 shl	 eax, 5
  00814	8b 4d dc	 mov	 ecx, DWORD PTR _a$[ebp]
  00817	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  0081a	0b c1		 or	 eax, ecx
  0081c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0081f	8b 95 9c fd ff
	ff		 mov	 edx, DWORD PTR tv166[ebp]
  00825	c1 ea 10	 shr	 edx, 16			; 00000010H
  00828	03 c2		 add	 eax, edx
  0082a	8b 4d dc	 mov	 ecx, DWORD PTR _a$[ebp]
  0082d	c1 e1 05	 shl	 ecx, 5
  00830	8b 55 dc	 mov	 edx, DWORD PTR _a$[ebp]
  00833	c1 ea 1b	 shr	 edx, 27			; 0000001bH
  00836	0b ca		 or	 ecx, edx
  00838	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0083e	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR tv191[ebp]
  00844	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0084a	03 ca		 add	 ecx, edx
  0084c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0084f	03 c1		 add	 eax, ecx
  00851	c1 e0 10	 shl	 eax, 16			; 00000010H
  00854	8b 4d dc	 mov	 ecx, DWORD PTR _a$[ebp]
  00857	c1 e1 05	 shl	 ecx, 5
  0085a	8b 55 dc	 mov	 edx, DWORD PTR _a$[ebp]
  0085d	c1 ea 1b	 shr	 edx, 27			; 0000001bH
  00860	0b ca		 or	 ecx, edx
  00862	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00868	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR tv219[ebp]
  0086e	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00874	03 ca		 add	 ecx, edx
  00876	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0087c	0b c1		 or	 eax, ecx
  0087e	c1 e8 10	 shr	 eax, 16			; 00000010H
  00881	8b 4d ac	 mov	 ecx, DWORD PTR _e$[ebp]
  00884	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00887	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  0088a	8b 94 95 64 fe
	ff ff		 mov	 edx, DWORD PTR _w$[ebp+edx*4]
  00891	c1 ea 10	 shr	 edx, 16			; 00000010H
  00894	03 ca		 add	 ecx, edx
  00896	8b 55 ac	 mov	 edx, DWORD PTR _e$[ebp]
  00899	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0089f	8b 75 f4	 mov	 esi, DWORD PTR _j$[ebp]
  008a2	8b b4 b5 64 fe
	ff ff		 mov	 esi, DWORD PTR _w$[ebp+esi*4]
  008a9	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  008af	03 d6		 add	 edx, esi
  008b1	c1 ea 10	 shr	 edx, 16			; 00000010H
  008b4	03 ca		 add	 ecx, edx
  008b6	c1 e1 10	 shl	 ecx, 16			; 00000010H
  008b9	8b 55 ac	 mov	 edx, DWORD PTR _e$[ebp]
  008bc	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  008c2	8b 75 f4	 mov	 esi, DWORD PTR _j$[ebp]
  008c5	8b b4 b5 64 fe
	ff ff		 mov	 esi, DWORD PTR _w$[ebp+esi*4]
  008cc	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  008d2	03 d6		 add	 edx, esi
  008d4	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  008da	0b ca		 or	 ecx, edx
  008dc	c1 e9 10	 shr	 ecx, 16			; 00000010H
  008df	8b 95 78 fd ff
	ff		 mov	 edx, DWORD PTR tv251[ebp]
  008e5	c1 ea 10	 shr	 edx, 16			; 00000010H
  008e8	03 ca		 add	 ecx, edx
  008ea	8b 55 ac	 mov	 edx, DWORD PTR _e$[ebp]
  008ed	c1 ea 10	 shr	 edx, 16			; 00000010H
  008f0	8b 75 f4	 mov	 esi, DWORD PTR _j$[ebp]
  008f3	8b b4 b5 64 fe
	ff ff		 mov	 esi, DWORD PTR _w$[ebp+esi*4]
  008fa	c1 ee 10	 shr	 esi, 16			; 00000010H
  008fd	03 d6		 add	 edx, esi
  008ff	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00902	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00908	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  0090b	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00912	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00918	03 f7		 add	 esi, edi
  0091a	c1 ee 10	 shr	 esi, 16			; 00000010H
  0091d	03 d6		 add	 edx, esi
  0091f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00922	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00925	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  0092b	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  0092e	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00935	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  0093b	03 f7		 add	 esi, edi
  0093d	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00943	0b d6		 or	 edx, esi
  00945	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0094b	8b b5 70 fd ff
	ff		 mov	 esi, DWORD PTR tv280[ebp]
  00951	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00957	03 d6		 add	 edx, esi
  00959	c1 ea 10	 shr	 edx, 16			; 00000010H
  0095c	03 ca		 add	 ecx, edx
  0095e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00961	8b 55 ac	 mov	 edx, DWORD PTR _e$[ebp]
  00964	c1 ea 10	 shr	 edx, 16			; 00000010H
  00967	8b 75 f4	 mov	 esi, DWORD PTR _j$[ebp]
  0096a	8b b4 b5 64 fe
	ff ff		 mov	 esi, DWORD PTR _w$[ebp+esi*4]
  00971	c1 ee 10	 shr	 esi, 16			; 00000010H
  00974	03 d6		 add	 edx, esi
  00976	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00979	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  0097f	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  00982	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00989	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  0098f	03 f7		 add	 esi, edi
  00991	c1 ee 10	 shr	 esi, 16			; 00000010H
  00994	03 d6		 add	 edx, esi
  00996	c1 e2 10	 shl	 edx, 16			; 00000010H
  00999	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  0099c	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  009a2	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  009a5	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  009ac	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  009b2	03 f7		 add	 esi, edi
  009b4	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  009ba	0b d6		 or	 edx, esi
  009bc	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  009c2	8b b5 68 fd ff
	ff		 mov	 esi, DWORD PTR tv312[ebp]
  009c8	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  009ce	03 d6		 add	 edx, esi
  009d0	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  009d6	0b ca		 or	 ecx, edx
  009d8	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009db	03 c1		 add	 eax, ecx
  009dd	8b 4d dc	 mov	 ecx, DWORD PTR _a$[ebp]
  009e0	c1 e1 05	 shl	 ecx, 5
  009e3	8b 55 dc	 mov	 edx, DWORD PTR _a$[ebp]
  009e6	c1 ea 1b	 shr	 edx, 27			; 0000001bH
  009e9	0b ca		 or	 ecx, edx
  009eb	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009ee	8b 95 60 fd ff
	ff		 mov	 edx, DWORD PTR tv341[ebp]
  009f4	c1 ea 10	 shr	 edx, 16			; 00000010H
  009f7	03 ca		 add	 ecx, edx
  009f9	8b 55 dc	 mov	 edx, DWORD PTR _a$[ebp]
  009fc	c1 e2 05	 shl	 edx, 5
  009ff	8b 75 dc	 mov	 esi, DWORD PTR _a$[ebp]
  00a02	c1 ee 1b	 shr	 esi, 27			; 0000001bH
  00a05	0b d6		 or	 edx, esi
  00a07	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00a0d	8b b5 54 fd ff
	ff		 mov	 esi, DWORD PTR tv366[ebp]
  00a13	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00a19	03 d6		 add	 edx, esi
  00a1b	c1 ea 10	 shr	 edx, 16			; 00000010H
  00a1e	03 ca		 add	 ecx, edx
  00a20	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00a23	8b 55 dc	 mov	 edx, DWORD PTR _a$[ebp]
  00a26	c1 e2 05	 shl	 edx, 5
  00a29	8b 75 dc	 mov	 esi, DWORD PTR _a$[ebp]
  00a2c	c1 ee 1b	 shr	 esi, 27			; 0000001bH
  00a2f	0b d6		 or	 edx, esi
  00a31	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00a37	8b b5 48 fd ff
	ff		 mov	 esi, DWORD PTR tv394[ebp]
  00a3d	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00a43	03 d6		 add	 edx, esi
  00a45	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00a4b	0b ca		 or	 ecx, edx
  00a4d	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00a53	8b 55 ac	 mov	 edx, DWORD PTR _e$[ebp]
  00a56	c1 ea 10	 shr	 edx, 16			; 00000010H
  00a59	8b 75 f4	 mov	 esi, DWORD PTR _j$[ebp]
  00a5c	8b b4 b5 64 fe
	ff ff		 mov	 esi, DWORD PTR _w$[ebp+esi*4]
  00a63	c1 ee 10	 shr	 esi, 16			; 00000010H
  00a66	03 d6		 add	 edx, esi
  00a68	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00a6b	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00a71	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  00a74	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00a7b	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00a81	03 f7		 add	 esi, edi
  00a83	c1 ee 10	 shr	 esi, 16			; 00000010H
  00a86	03 d6		 add	 edx, esi
  00a88	c1 e2 10	 shl	 edx, 16			; 00000010H
  00a8b	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00a8e	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00a94	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  00a97	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00a9e	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00aa4	03 f7		 add	 esi, edi
  00aa6	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00aac	0b d6		 or	 edx, esi
  00aae	c1 ea 10	 shr	 edx, 16			; 00000010H
  00ab1	8b b5 3c fd ff
	ff		 mov	 esi, DWORD PTR tv426[ebp]
  00ab7	c1 ee 10	 shr	 esi, 16			; 00000010H
  00aba	03 d6		 add	 edx, esi
  00abc	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00abf	c1 ee 10	 shr	 esi, 16			; 00000010H
  00ac2	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  00ac5	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00acc	c1 ef 10	 shr	 edi, 16			; 00000010H
  00acf	03 f7		 add	 esi, edi
  00ad1	8b 7d ac	 mov	 edi, DWORD PTR _e$[ebp]
  00ad4	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00ada	8b 5d f4	 mov	 ebx, DWORD PTR _j$[ebp]
  00add	8b 9c 9d 64 fe
	ff ff		 mov	 ebx, DWORD PTR _w$[ebp+ebx*4]
  00ae4	81 e3 ff ff 00
	00		 and	 ebx, 65535		; 0000ffffH
  00aea	03 fb		 add	 edi, ebx
  00aec	c1 ef 10	 shr	 edi, 16			; 00000010H
  00aef	03 f7		 add	 esi, edi
  00af1	c1 e6 10	 shl	 esi, 16			; 00000010H
  00af4	8b 7d ac	 mov	 edi, DWORD PTR _e$[ebp]
  00af7	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00afd	8b 5d f4	 mov	 ebx, DWORD PTR _j$[ebp]
  00b00	8b 9c 9d 64 fe
	ff ff		 mov	 ebx, DWORD PTR _w$[ebp+ebx*4]
  00b07	81 e3 ff ff 00
	00		 and	 ebx, 65535		; 0000ffffH
  00b0d	03 fb		 add	 edi, ebx
  00b0f	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00b15	0b f7		 or	 esi, edi
  00b17	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00b1d	8b bd 34 fd ff
	ff		 mov	 edi, DWORD PTR tv455[ebp]
  00b23	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00b29	03 f7		 add	 esi, edi
  00b2b	c1 ee 10	 shr	 esi, 16			; 00000010H
  00b2e	03 d6		 add	 edx, esi
  00b30	c1 e2 10	 shl	 edx, 16			; 00000010H
  00b33	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00b36	c1 ee 10	 shr	 esi, 16			; 00000010H
  00b39	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  00b3c	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00b43	c1 ef 10	 shr	 edi, 16			; 00000010H
  00b46	03 f7		 add	 esi, edi
  00b48	8b 7d ac	 mov	 edi, DWORD PTR _e$[ebp]
  00b4b	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00b51	8b 5d f4	 mov	 ebx, DWORD PTR _j$[ebp]
  00b54	8b 9c 9d 64 fe
	ff ff		 mov	 ebx, DWORD PTR _w$[ebp+ebx*4]
  00b5b	81 e3 ff ff 00
	00		 and	 ebx, 65535		; 0000ffffH
  00b61	03 fb		 add	 edi, ebx
  00b63	c1 ef 10	 shr	 edi, 16			; 00000010H
  00b66	03 f7		 add	 esi, edi
  00b68	c1 e6 10	 shl	 esi, 16			; 00000010H
  00b6b	8b 7d ac	 mov	 edi, DWORD PTR _e$[ebp]
  00b6e	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00b74	8b 5d f4	 mov	 ebx, DWORD PTR _j$[ebp]
  00b77	8b 9c 9d 64 fe
	ff ff		 mov	 ebx, DWORD PTR _w$[ebp+ebx*4]
  00b7e	81 e3 ff ff 00
	00		 and	 ebx, 65535		; 0000ffffH
  00b84	03 fb		 add	 edi, ebx
  00b86	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00b8c	0b f7		 or	 esi, edi
  00b8e	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00b94	8b bd 2c fd ff
	ff		 mov	 edi, DWORD PTR tv487[ebp]
  00b9a	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00ba0	03 f7		 add	 esi, edi
  00ba2	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00ba8	0b d6		 or	 edx, esi
  00baa	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00bb0	03 ca		 add	 ecx, edx
  00bb2	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00bb5	03 c1		 add	 eax, ecx
  00bb7	c1 e0 10	 shl	 eax, 16			; 00000010H
  00bba	8b 4d dc	 mov	 ecx, DWORD PTR _a$[ebp]
  00bbd	c1 e1 05	 shl	 ecx, 5
  00bc0	8b 55 dc	 mov	 edx, DWORD PTR _a$[ebp]
  00bc3	c1 ea 1b	 shr	 edx, 27			; 0000001bH
  00bc6	0b ca		 or	 ecx, edx
  00bc8	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00bcb	8b 95 24 fd ff
	ff		 mov	 edx, DWORD PTR tv519[ebp]
  00bd1	c1 ea 10	 shr	 edx, 16			; 00000010H
  00bd4	03 ca		 add	 ecx, edx
  00bd6	8b 55 dc	 mov	 edx, DWORD PTR _a$[ebp]
  00bd9	c1 e2 05	 shl	 edx, 5
  00bdc	8b 75 dc	 mov	 esi, DWORD PTR _a$[ebp]
  00bdf	c1 ee 1b	 shr	 esi, 27			; 0000001bH
  00be2	0b d6		 or	 edx, esi
  00be4	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00bea	8b b5 18 fd ff
	ff		 mov	 esi, DWORD PTR tv544[ebp]
  00bf0	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00bf6	03 d6		 add	 edx, esi
  00bf8	c1 ea 10	 shr	 edx, 16			; 00000010H
  00bfb	03 ca		 add	 ecx, edx
  00bfd	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00c00	8b 55 dc	 mov	 edx, DWORD PTR _a$[ebp]
  00c03	c1 e2 05	 shl	 edx, 5
  00c06	8b 75 dc	 mov	 esi, DWORD PTR _a$[ebp]
  00c09	c1 ee 1b	 shr	 esi, 27			; 0000001bH
  00c0c	0b d6		 or	 edx, esi
  00c0e	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00c14	8b b5 0c fd ff
	ff		 mov	 esi, DWORD PTR tv572[ebp]
  00c1a	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00c20	03 d6		 add	 edx, esi
  00c22	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00c28	0b ca		 or	 ecx, edx
  00c2a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00c30	8b 55 ac	 mov	 edx, DWORD PTR _e$[ebp]
  00c33	c1 ea 10	 shr	 edx, 16			; 00000010H
  00c36	8b 75 f4	 mov	 esi, DWORD PTR _j$[ebp]
  00c39	8b b4 b5 64 fe
	ff ff		 mov	 esi, DWORD PTR _w$[ebp+esi*4]
  00c40	c1 ee 10	 shr	 esi, 16			; 00000010H
  00c43	03 d6		 add	 edx, esi
  00c45	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00c48	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00c4e	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  00c51	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00c58	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00c5e	03 f7		 add	 esi, edi
  00c60	c1 ee 10	 shr	 esi, 16			; 00000010H
  00c63	03 d6		 add	 edx, esi
  00c65	c1 e2 10	 shl	 edx, 16			; 00000010H
  00c68	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00c6b	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00c71	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  00c74	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00c7b	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00c81	03 f7		 add	 esi, edi
  00c83	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00c89	0b d6		 or	 edx, esi
  00c8b	c1 ea 10	 shr	 edx, 16			; 00000010H
  00c8e	8b b5 00 fd ff
	ff		 mov	 esi, DWORD PTR tv604[ebp]
  00c94	c1 ee 10	 shr	 esi, 16			; 00000010H
  00c97	03 d6		 add	 edx, esi
  00c99	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00c9c	c1 ee 10	 shr	 esi, 16			; 00000010H
  00c9f	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  00ca2	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00ca9	c1 ef 10	 shr	 edi, 16			; 00000010H
  00cac	03 f7		 add	 esi, edi
  00cae	8b 7d ac	 mov	 edi, DWORD PTR _e$[ebp]
  00cb1	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00cb7	8b 5d f4	 mov	 ebx, DWORD PTR _j$[ebp]
  00cba	8b 9c 9d 64 fe
	ff ff		 mov	 ebx, DWORD PTR _w$[ebp+ebx*4]
  00cc1	81 e3 ff ff 00
	00		 and	 ebx, 65535		; 0000ffffH
  00cc7	03 fb		 add	 edi, ebx
  00cc9	c1 ef 10	 shr	 edi, 16			; 00000010H
  00ccc	03 f7		 add	 esi, edi
  00cce	c1 e6 10	 shl	 esi, 16			; 00000010H
  00cd1	8b 7d ac	 mov	 edi, DWORD PTR _e$[ebp]
  00cd4	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00cda	8b 5d f4	 mov	 ebx, DWORD PTR _j$[ebp]
  00cdd	8b 9c 9d 64 fe
	ff ff		 mov	 ebx, DWORD PTR _w$[ebp+ebx*4]
  00ce4	81 e3 ff ff 00
	00		 and	 ebx, 65535		; 0000ffffH
  00cea	03 fb		 add	 edi, ebx
  00cec	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00cf2	0b f7		 or	 esi, edi
  00cf4	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00cfa	8b bd f8 fc ff
	ff		 mov	 edi, DWORD PTR tv633[ebp]
  00d00	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00d06	03 f7		 add	 esi, edi
  00d08	c1 ee 10	 shr	 esi, 16			; 00000010H
  00d0b	03 d6		 add	 edx, esi
  00d0d	c1 e2 10	 shl	 edx, 16			; 00000010H
  00d10	8b 75 ac	 mov	 esi, DWORD PTR _e$[ebp]
  00d13	c1 ee 10	 shr	 esi, 16			; 00000010H
  00d16	8b 7d f4	 mov	 edi, DWORD PTR _j$[ebp]
  00d19	8b bc bd 64 fe
	ff ff		 mov	 edi, DWORD PTR _w$[ebp+edi*4]
  00d20	c1 ef 10	 shr	 edi, 16			; 00000010H
  00d23	03 f7		 add	 esi, edi
  00d25	8b 7d ac	 mov	 edi, DWORD PTR _e$[ebp]
  00d28	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00d2e	8b 5d f4	 mov	 ebx, DWORD PTR _j$[ebp]
  00d31	8b 9c 9d 64 fe
	ff ff		 mov	 ebx, DWORD PTR _w$[ebp+ebx*4]
  00d38	81 e3 ff ff 00
	00		 and	 ebx, 65535		; 0000ffffH
  00d3e	03 fb		 add	 edi, ebx
  00d40	c1 ef 10	 shr	 edi, 16			; 00000010H
  00d43	03 f7		 add	 esi, edi
  00d45	c1 e6 10	 shl	 esi, 16			; 00000010H
  00d48	8b 7d ac	 mov	 edi, DWORD PTR _e$[ebp]
  00d4b	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00d51	8b 5d f4	 mov	 ebx, DWORD PTR _j$[ebp]
  00d54	8b 9c 9d 64 fe
	ff ff		 mov	 ebx, DWORD PTR _w$[ebp+ebx*4]
  00d5b	81 e3 ff ff 00
	00		 and	 ebx, 65535		; 0000ffffH
  00d61	03 fb		 add	 edi, ebx
  00d63	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00d69	0b f7		 or	 esi, edi
  00d6b	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00d71	8b bd f0 fc ff
	ff		 mov	 edi, DWORD PTR tv665[ebp]
  00d77	81 e7 ff ff 00
	00		 and	 edi, 65535		; 0000ffffH
  00d7d	03 f7		 add	 esi, edi
  00d7f	81 e6 ff ff 00
	00		 and	 esi, 65535		; 0000ffffH
  00d85	0b d6		 or	 edx, esi
  00d87	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00d8d	03 ca		 add	 ecx, edx
  00d8f	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00d95	0b c1		 or	 eax, ecx
  00d97	89 45 e8	 mov	 DWORD PTR _tmp$[ebp], eax

; 215  : 		e = d;

  00d9a	8b 45 b8	 mov	 eax, DWORD PTR _d$[ebp]
  00d9d	89 45 ac	 mov	 DWORD PTR _e$[ebp], eax

; 216  : 		d = c;

  00da0	8b 45 c4	 mov	 eax, DWORD PTR _c$[ebp]
  00da3	89 45 b8	 mov	 DWORD PTR _d$[ebp], eax

; 217  : 		c = ROTATE_LEFT(b,30);

  00da6	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00da9	c1 e0 1e	 shl	 eax, 30			; 0000001eH
  00dac	8b 4d d0	 mov	 ecx, DWORD PTR _b$[ebp]
  00daf	c1 e9 02	 shr	 ecx, 2
  00db2	0b c1		 or	 eax, ecx
  00db4	89 45 c4	 mov	 DWORD PTR _c$[ebp], eax

; 218  : 		b = a;

  00db7	8b 45 dc	 mov	 eax, DWORD PTR _a$[ebp]
  00dba	89 45 d0	 mov	 DWORD PTR _b$[ebp], eax

; 219  : 		a = tmp;

  00dbd	8b 45 e8	 mov	 eax, DWORD PTR _tmp$[ebp]
  00dc0	89 45 dc	 mov	 DWORD PTR _a$[ebp], eax

; 220  : 	}

  00dc3	e9 ca f2 ff ff	 jmp	 $LN3@ShaTransfo
$LN2@ShaTransfo:

; 221  : 	state[0] = SHA1_ADD(state[0], a);

  00dc8	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00dcb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00dcd	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00dd0	8b 55 dc	 mov	 edx, DWORD PTR _a$[ebp]
  00dd3	c1 ea 10	 shr	 edx, 16			; 00000010H
  00dd6	03 ca		 add	 ecx, edx
  00dd8	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00ddb	8b 10		 mov	 edx, DWORD PTR [eax]
  00ddd	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00de3	8b 45 dc	 mov	 eax, DWORD PTR _a$[ebp]
  00de6	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00deb	03 d0		 add	 edx, eax
  00ded	c1 ea 10	 shr	 edx, 16			; 00000010H
  00df0	03 ca		 add	 ecx, edx
  00df2	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00df5	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00df8	8b 02		 mov	 eax, DWORD PTR [edx]
  00dfa	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00dff	8b 55 dc	 mov	 edx, DWORD PTR _a$[ebp]
  00e02	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00e08	03 c2		 add	 eax, edx
  00e0a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00e0f	0b c8		 or	 ecx, eax
  00e11	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00e14	89 08		 mov	 DWORD PTR [eax], ecx

; 222  : 	state[1] = SHA1_ADD(state[1], b);

  00e16	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00e19	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e1c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00e1f	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  00e22	c1 ea 10	 shr	 edx, 16			; 00000010H
  00e25	03 ca		 add	 ecx, edx
  00e27	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00e2a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00e2d	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00e33	8b 45 d0	 mov	 eax, DWORD PTR _b$[ebp]
  00e36	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00e3b	03 d0		 add	 edx, eax
  00e3d	c1 ea 10	 shr	 edx, 16			; 00000010H
  00e40	03 ca		 add	 ecx, edx
  00e42	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00e45	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00e48	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00e4b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00e50	8b 55 d0	 mov	 edx, DWORD PTR _b$[ebp]
  00e53	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00e59	03 c2		 add	 eax, edx
  00e5b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00e60	0b c8		 or	 ecx, eax
  00e62	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00e65	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 223  : 	state[2] = SHA1_ADD(state[2], c);

  00e68	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00e6b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00e6e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00e71	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  00e74	c1 ea 10	 shr	 edx, 16			; 00000010H
  00e77	03 ca		 add	 ecx, edx
  00e79	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00e7c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00e7f	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00e85	8b 45 c4	 mov	 eax, DWORD PTR _c$[ebp]
  00e88	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00e8d	03 d0		 add	 edx, eax
  00e8f	c1 ea 10	 shr	 edx, 16			; 00000010H
  00e92	03 ca		 add	 ecx, edx
  00e94	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00e97	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00e9a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00e9d	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00ea2	8b 55 c4	 mov	 edx, DWORD PTR _c$[ebp]
  00ea5	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00eab	03 c2		 add	 eax, edx
  00ead	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00eb2	0b c8		 or	 ecx, eax
  00eb4	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00eb7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 224  : 	state[3] = SHA1_ADD(state[3], d);

  00eba	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00ebd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00ec0	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00ec3	8b 55 b8	 mov	 edx, DWORD PTR _d$[ebp]
  00ec6	c1 ea 10	 shr	 edx, 16			; 00000010H
  00ec9	03 ca		 add	 ecx, edx
  00ecb	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00ece	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00ed1	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00ed7	8b 45 b8	 mov	 eax, DWORD PTR _d$[ebp]
  00eda	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00edf	03 d0		 add	 edx, eax
  00ee1	c1 ea 10	 shr	 edx, 16			; 00000010H
  00ee4	03 ca		 add	 ecx, edx
  00ee6	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00ee9	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00eec	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00eef	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00ef4	8b 55 b8	 mov	 edx, DWORD PTR _d$[ebp]
  00ef7	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00efd	03 c2		 add	 eax, edx
  00eff	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00f04	0b c8		 or	 ecx, eax
  00f06	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00f09	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 225  : 	state[4] = SHA1_ADD(state[4], e);

  00f0c	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00f0f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00f12	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00f15	8b 55 ac	 mov	 edx, DWORD PTR _e$[ebp]
  00f18	c1 ea 10	 shr	 edx, 16			; 00000010H
  00f1b	03 ca		 add	 ecx, edx
  00f1d	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00f20	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00f23	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00f29	8b 45 ac	 mov	 eax, DWORD PTR _e$[ebp]
  00f2c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00f31	03 d0		 add	 edx, eax
  00f33	c1 ea 10	 shr	 edx, 16			; 00000010H
  00f36	03 ca		 add	 ecx, edx
  00f38	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00f3b	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00f3e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00f41	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00f46	8b 55 ac	 mov	 edx, DWORD PTR _e$[ebp]
  00f49	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00f4f	03 c2		 add	 eax, edx
  00f51	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00f56	0b c8		 or	 ecx, eax
  00f58	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00f5b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 226  : }

  00f5e	52		 push	 edx
  00f5f	8b cd		 mov	 ecx, ebp
  00f61	50		 push	 eax
  00f62	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN99@ShaTransfo
  00f68	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00f6d	58		 pop	 eax
  00f6e	5a		 pop	 edx
  00f6f	5f		 pop	 edi
  00f70	5e		 pop	 esi
  00f71	5b		 pop	 ebx
  00f72	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f75	33 cd		 xor	 ecx, ebp
  00f77	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f7c	81 c4 14 03 00
	00		 add	 esp, 788		; 00000314H
  00f82	3b ec		 cmp	 ebp, esp
  00f84	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f89	8b e5		 mov	 esp, ebp
  00f8b	5d		 pop	 ebp
  00f8c	c3		 ret	 0
  00f8d	8d 49 00	 npad	 3
$LN99@ShaTransfo:
  00f90	01 00 00 00	 DD	 1
  00f94	00 00 00 00	 DD	 $LN98@ShaTransfo
$LN98@ShaTransfo:
  00f98	64 fe ff ff	 DD	 -412			; fffffe64H
  00f9c	40 01 00 00	 DD	 320			; 00000140H
  00fa0	00 00 00 00	 DD	 $LN97@ShaTransfo
$LN97@ShaTransfo:
  00fa4	77		 DB	 119			; 00000077H
  00fa5	00		 DB	 0
_ShaTransform ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Decode
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_pOutput$ = 8						; size = 4
_pInput$ = 12						; size = 4
_nLen$ = 16						; size = 4
_Decode	PROC						; COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 233  : 	unsigned int i, j;
; 234  : 	for (i = 0, j = 0; j < nLen; i++, j += 4)

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0002c	eb 12		 jmp	 SHORT $LN3@Decode
$LN2@Decode:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _j$[ebp]
  0003a	83 c1 04	 add	 ecx, 4
  0003d	89 4d ec	 mov	 DWORD PTR _j$[ebp], ecx
$LN3@Decode:
  00040	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00043	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00046	73 41		 jae	 SHORT $LN4@Decode

; 235  : 	{
; 236  : 		pOutput[i] = ((unsigned int)pInput[j+3]) | 
; 237  : 			(((unsigned int)pInput[j+2]) << 8) |
; 238  : 			(((unsigned int)pInput[j+1]) << 16) | 
; 239  : 			(((unsigned int)pInput[j]) << 24);

  00048	8b 45 0c	 mov	 eax, DWORD PTR _pInput$[ebp]
  0004b	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  0004e	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00052	8b 55 0c	 mov	 edx, DWORD PTR _pInput$[ebp]
  00055	03 55 ec	 add	 edx, DWORD PTR _j$[ebp]
  00058	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0005c	c1 e0 08	 shl	 eax, 8
  0005f	0b c8		 or	 ecx, eax
  00061	8b 55 0c	 mov	 edx, DWORD PTR _pInput$[ebp]
  00064	03 55 ec	 add	 edx, DWORD PTR _j$[ebp]
  00067	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0006b	c1 e0 10	 shl	 eax, 16			; 00000010H
  0006e	0b c8		 or	 ecx, eax
  00070	8b 55 0c	 mov	 edx, DWORD PTR _pInput$[ebp]
  00073	03 55 ec	 add	 edx, DWORD PTR _j$[ebp]
  00076	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00079	c1 e0 18	 shl	 eax, 24			; 00000018H
  0007c	0b c8		 or	 ecx, eax
  0007e	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00081	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  00084	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 240  : 	}

  00087	eb a5		 jmp	 SHORT $LN2@Decode
$LN4@Decode:

; 241  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_Decode	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Encode
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_pOutput$ = 8						; size = 4
_pInput$ = 12						; size = 4
_nLen$ = 16						; size = 4
_Encode	PROC						; COMDAT

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 247  : 	unsigned int i, j;
; 248  : 	for (i = 0, j = 0; j < nLen; i++, j += 4) 

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0002c	eb 12		 jmp	 SHORT $LN3@Encode
$LN2@Encode:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _j$[ebp]
  0003a	83 c1 04	 add	 ecx, 4
  0003d	89 4d ec	 mov	 DWORD PTR _j$[ebp], ecx
$LN3@Encode:
  00040	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00043	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00046	73 6d		 jae	 SHORT $LN4@Encode

; 249  : 	{
; 250  : 		pOutput[j+3] = (unsigned char)(pInput[i] & 0xff);

  00048	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  0004e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00051	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00057	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  0005a	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  0005d	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 251  : 		pOutput[j+2] = (unsigned char)((pInput[i] >> 8) & 0xff);

  00060	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  00066	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00069	c1 ea 08	 shr	 edx, 8
  0006c	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00072	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  00075	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  00078	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 252  : 		pOutput[j+1] = (unsigned char)((pInput[i] >> 16) & 0xff);

  0007b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  00081	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00084	c1 ea 10	 shr	 edx, 16			; 00000010H
  00087	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0008d	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  00090	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  00093	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 253  : 		pOutput[j] = (unsigned char)((pInput[i] >> 24) & 0xff);

  00096	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00099	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  0009c	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0009f	c1 ea 18	 shr	 edx, 24			; 00000018H
  000a2	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000a8	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  000ab	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  000ae	88 10		 mov	 BYTE PTR [eax], dl

; 254  : 	}

  000b0	e9 79 ff ff ff	 jmp	 $LN2@Encode
$LN4@Encode:

; 255  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_Encode	ENDP
_TEXT	ENDS
PUBLIC	_Sha1_Add
EXTRN	__aullrem:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _Sha1_Add
_TEXT	SEGMENT
_sum$ = -12						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_Sha1_Add PROC						; COMDAT

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 259  : 	/*
; 260  : 	unsigned int lsw = (x & 0xFFFF) + (y & 0xFFFF);
; 261  : 	unsigned int msw = (x >> 16) + (y >> 16) + (lsw >> 16);
; 262  : 	return (msw << 16) | (lsw & 0xFFFF);
; 263  : 	*/
; 264  : 	///*
; 265  : #if defined(UINT64)
; 266  : 	undef UINT64
; 267  : #endif
; 268  : #if WIN32
; 269  : 		typedef unsigned __int64 UINT64;
; 270  : #else
; 271  : 		typedef unsigned long long UINT64;
; 272  : #endif
; 273  : 	UINT64 sum = 0;

  0001e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _sum$[ebp], 0
  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _sum$[ebp+4], 0

; 274  : 	sum = x + y;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0002f	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  00032	33 c9		 xor	 ecx, ecx
  00034	89 45 f4	 mov	 DWORD PTR _sum$[ebp], eax
  00037	89 4d f8	 mov	 DWORD PTR _sum$[ebp+4], ecx

; 275  : 	return sum % MAX_VALUE;

  0003a	6a 01		 push	 1
  0003c	6a 00		 push	 0
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _sum$[ebp+4]
  00041	50		 push	 eax
  00042	8b 4d f4	 mov	 ecx, DWORD PTR _sum$[ebp]
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 __aullrem

; 276  : 	//*/
; 277  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_Sha1_Add ENDP
_TEXT	ENDS
END
