; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\windows\belial\crypt\Md5.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_PADDING DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_DATA	ENDS
PUBLIC	_MD5Init
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\windows\belial\crypt\md5.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _MD5Init
_TEXT	SEGMENT
_pContext$ = 8						; size = 4
_MD5Init PROC						; COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 124  : 	pContext->count[0] = 0;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 125  : 	pContext->count[1] = 0;

  00028	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0002b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 126  : 	pContext->state[0] = A;

  00032	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00035	c7 00 01 23 45
	67		 mov	 DWORD PTR [eax], 1732584193 ; 67452301H

; 127  : 	pContext->state[1] = B;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0003e	c7 40 04 89 ab
	cd ef		 mov	 DWORD PTR [eax+4], -271733879 ; efcdab89H

; 128  : 	pContext->state[2] = C;

  00045	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00048	c7 40 08 fe dc
	ba 98		 mov	 DWORD PTR [eax+8], -1732584194 ; 98badcfeH

; 129  : 	pContext->state[3] = D;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00052	c7 40 0c 76 54
	32 10		 mov	 DWORD PTR [eax+12], 271733878 ; 10325476H

; 130  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_MD5Init ENDP
_TEXT	ENDS
PUBLIC	_MD5Update
EXTRN	_memcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MD5Update
_TEXT	SEGMENT
_partLen$ = -32						; size = 4
_index$ = -20						; size = 4
_i$ = -8						; size = 4
_pContext$ = 8						; size = 4
_pInput$ = 12						; size = 4
_nLen$ = 16						; size = 4
_MD5Update PROC						; COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 137  : 	unsigned int i, index, partLen;
; 138  : 
; 139  : 	//长度除于8,其实是每次运算需要512位，64*8
; 140  : 	/* Compute number of bytes mod 64 */
; 141  : 	index = (unsigned int)((pContext->count[0] >> 3) & 0x3f);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00021	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00024	c1 e9 03	 shr	 ecx, 3
  00027	83 e1 3f	 and	 ecx, 63			; 0000003fH
  0002a	89 4d ec	 mov	 DWORD PTR _index$[ebp], ecx

; 142  : 
; 143  : 	//需要运算的字节量*8
; 144  : 	pContext->count[0] += ((unsigned int)nLen << 3);

  0002d	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00030	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00033	8b 55 10	 mov	 edx, DWORD PTR _nLen$[ebp]
  00036	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  0003c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 145  : 
; 146  : 	//这是不是表示溢出了？
; 147  : 	/* Update number of bits */
; 148  : 	if ((pContext->count[0]) < ((unsigned int)nLen << 3))

  0003f	8b 45 10	 mov	 eax, DWORD PTR _nLen$[ebp]
  00042	c1 e0 03	 shl	 eax, 3
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00048	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  0004b	73 0f		 jae	 SHORT $LN6@MD5Update

; 149  : 	{
; 150  : 		pContext->count[1]++;

  0004d	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00050	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00053	83 c1 01	 add	 ecx, 1
  00056	8b 55 08	 mov	 edx, DWORD PTR _pContext$[ebp]
  00059	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN6@MD5Update:

; 151  : 	}
; 152  : 
; 153  : 	pContext->count[1] += ((unsigned int)nLen >> 29);

  0005c	8b 45 10	 mov	 eax, DWORD PTR _nLen$[ebp]
  0005f	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00065	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00068	8b 55 08	 mov	 edx, DWORD PTR _pContext$[ebp]
  0006b	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 154  : 
; 155  : 	//需要从新的数据中使用可以用的字符数
; 156  : 	partLen = 64 - index;

  0006e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00073	2b 45 ec	 sub	 eax, DWORD PTR _index$[ebp]
  00076	89 45 e0	 mov	 DWORD PTR _partLen$[ebp], eax

; 157  : 
; 158  : 	/* Transform as many times as possible.
; 159  : 	*/
; 160  : 	if (nLen >= partLen) {

  00079	8b 45 10	 mov	 eax, DWORD PTR _nLen$[ebp]
  0007c	3b 45 e0	 cmp	 eax, DWORD PTR _partLen$[ebp]
  0007f	72 68		 jb	 SHORT $LN5@MD5Update

; 161  : 		// MD5_memcpy((unsigned char *)&pContext->buffer[index], (unsigned char *)pInput, partLen);
; 162  : 		memcpy(&pContext->buffer[index],pInput,partLen);

  00081	8b 45 e0	 mov	 eax, DWORD PTR _partLen$[ebp]
  00084	50		 push	 eax
  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 ec	 mov	 edx, DWORD PTR _index$[ebp]
  0008c	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0008f	8d 4c 10 18	 lea	 ecx, DWORD PTR [eax+edx+24]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 _memcpy
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH

; 163  : 		MD5Transform(pContext->state, pContext->buffer);

  0009c	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0009f	83 c0 18	 add	 eax, 24			; 00000018H
  000a2	50		 push	 eax
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 _MD5Transform
  000ac	83 c4 08	 add	 esp, 8

; 164  : 
; 165  : 		for (i = partLen; (i + 63) < nLen; i += 64)

  000af	8b 45 e0	 mov	 eax, DWORD PTR _partLen$[ebp]
  000b2	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  000b5	eb 09		 jmp	 SHORT $LN4@MD5Update
$LN3@MD5Update:
  000b7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ba	83 c0 40	 add	 eax, 64			; 00000040H
  000bd	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@MD5Update:
  000c0	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000c3	83 c0 3f	 add	 eax, 63			; 0000003fH
  000c6	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  000c9	73 15		 jae	 SHORT $LN2@MD5Update

; 166  : 		{
; 167  : 			MD5Transform(pContext->state, &pInput[i]);

  000cb	8b 45 0c	 mov	 eax, DWORD PTR _pInput$[ebp]
  000ce	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 _MD5Transform
  000db	83 c4 08	 add	 esp, 8

; 168  : 		}

  000de	eb d7		 jmp	 SHORT $LN3@MD5Update
$LN2@MD5Update:

; 169  : 
; 170  : 		index = 0;

  000e0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _index$[ebp], 0

; 171  : 	}
; 172  : 	else

  000e7	eb 07		 jmp	 SHORT $LN1@MD5Update
$LN5@MD5Update:

; 173  : 	{
; 174  : 		i = 0;

  000e9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN1@MD5Update:

; 175  : 	}
; 176  : 
; 177  : 	/* Buffer remaining input */
; 178  : 	//MD5_memcpy((unsigned char *)&pContext->buffer[index], (unsigned char *)&pInput[i],nLen-i);
; 179  : 	memcpy(&pContext->buffer[index],&pInput[i],nLen-i);

  000f0	8b 45 10	 mov	 eax, DWORD PTR _nLen$[ebp]
  000f3	2b 45 f8	 sub	 eax, DWORD PTR _i$[ebp]
  000f6	50		 push	 eax
  000f7	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  000fa	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  000fd	51		 push	 ecx
  000fe	8b 55 ec	 mov	 edx, DWORD PTR _index$[ebp]
  00101	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00104	8d 4c 10 18	 lea	 ecx, DWORD PTR [eax+edx+24]
  00108	51		 push	 ecx
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 180  : }

  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0011a	3b ec		 cmp	 ebp, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
_MD5Update ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_MD5Final
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MD5Final
_TEXT	SEGMENT
tv78 = -240						; size = 4
_bits$ = -40						; size = 8
_padLen$ = -24						; size = 4
_index$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pContext$ = 8						; size = 4
_digest$ = 12						; size = 4
_MD5Final PROC						; COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 186  : 	unsigned int index, padLen;
; 187  : 	unsigned char bits[8]= {0};

  00028	c6 45 d8 00	 mov	 BYTE PTR _bits$[ebp], 0
  0002c	33 c0		 xor	 eax, eax
  0002e	89 45 d9	 mov	 DWORD PTR _bits$[ebp+1], eax
  00031	66 89 45 dd	 mov	 WORD PTR _bits$[ebp+5], ax
  00035	88 45 df	 mov	 BYTE PTR _bits$[ebp+7], al

; 188  : 
; 189  : 	/* Save number of bits */
; 190  : 	Encode(bits, pContext->count, 8);

  00038	6a 08		 push	 8
  0003a	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0003d	83 c0 10	 add	 eax, 16			; 00000010H
  00040	50		 push	 eax
  00041	8d 4d d8	 lea	 ecx, DWORD PTR _bits$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _Encode
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 191  : 
; 192  : 	/* Pad out to 56 mod 64.
; 193  : 	*/
; 194  : 	index = (unsigned int)((pContext->count[0] >> 3) & 0x3f);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00050	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00053	c1 e9 03	 shr	 ecx, 3
  00056	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00059	89 4d f4	 mov	 DWORD PTR _index$[ebp], ecx

; 195  : 	padLen = (index < 56) ? (56 - index) : (120 - index);

  0005c	83 7d f4 38	 cmp	 DWORD PTR _index$[ebp], 56 ; 00000038H
  00060	73 10		 jae	 SHORT $LN3@MD5Final
  00062	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00067	2b 45 f4	 sub	 eax, DWORD PTR _index$[ebp]
  0006a	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv78[ebp], eax
  00070	eb 0e		 jmp	 SHORT $LN4@MD5Final
$LN3@MD5Final:
  00072	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00077	2b 4d f4	 sub	 ecx, DWORD PTR _index$[ebp]
  0007a	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv78[ebp], ecx
$LN4@MD5Final:
  00080	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv78[ebp]
  00086	89 55 e8	 mov	 DWORD PTR _padLen$[ebp], edx

; 196  : 	//对填充数据做MD5运算
; 197  : 	MD5Update(pContext, PADDING, padLen);

  00089	8b 45 e8	 mov	 eax, DWORD PTR _padLen$[ebp]
  0008c	50		 push	 eax
  0008d	68 00 00 00 00	 push	 OFFSET _PADDING
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 _MD5Update
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 198  : 
; 199  : 	//填充之前的长度
; 200  : 	MD5Update(pContext, bits, 8);

  0009e	6a 08		 push	 8
  000a0	8d 45 d8	 lea	 eax, DWORD PTR _bits$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 _MD5Update
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 201  : 	/* Store state in digest */
; 202  : 	Encode(digest, pContext->state, 16);

  000b0	6a 10		 push	 16			; 00000010H
  000b2	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR _digest$[ebp]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 _Encode
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 203  : 
; 204  : 	/* Zeroize sensitive information.*/
; 205  : 	//MD5_memset ((POINTER)context, 0, sizeof (*context));
; 206  : 	memset(pContext,0,sizeof(*pContext));//可以注释，除非打算重用

  000c2	6a 58		 push	 88			; 00000058H
  000c4	6a 00		 push	 0
  000c6	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memset
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 207  : }

  000d2	52		 push	 edx
  000d3	8b cd		 mov	 ecx, ebp
  000d5	50		 push	 eax
  000d6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@MD5Final
  000dc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e1	58		 pop	 eax
  000e2	5a		 pop	 edx
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	33 cd		 xor	 ecx, ebp
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000f6	3b ec		 cmp	 ebp, esp
  000f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
  00101	8d 49 00	 npad	 3
$LN7@MD5Final:
  00104	01 00 00 00	 DD	 1
  00108	00 00 00 00	 DD	 $LN6@MD5Final
$LN6@MD5Final:
  0010c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00110	08 00 00 00	 DD	 8
  00114	00 00 00 00	 DD	 $LN5@MD5Final
$LN5@MD5Final:
  00118	62		 DB	 98			; 00000062H
  00119	69		 DB	 105			; 00000069H
  0011a	74		 DB	 116			; 00000074H
  0011b	73		 DB	 115			; 00000073H
  0011c	00		 DB	 0
_MD5Final ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Encode
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_pOutput$ = 8						; size = 4
_pInput$ = 12						; size = 4
_nLen$ = 16						; size = 4
_Encode	PROC						; COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 227  : 	unsigned int i, j;
; 228  : 	for (i = 0, j = 0; j < nLen; i++, j += 4) 

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0002c	eb 12		 jmp	 SHORT $LN3@Encode
$LN2@Encode:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _j$[ebp]
  0003a	83 c1 04	 add	 ecx, 4
  0003d	89 4d ec	 mov	 DWORD PTR _j$[ebp], ecx
$LN3@Encode:
  00040	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00043	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00046	73 6d		 jae	 SHORT $LN4@Encode

; 229  : 	{
; 230  : 		pOutput[j] = (unsigned char)(pInput[i] & 0xff);

  00048	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  0004e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00051	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00057	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  0005a	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  0005d	88 10		 mov	 BYTE PTR [eax], dl

; 231  : 		pOutput[j+1] = (unsigned char)((pInput[i] >> 8) & 0xff);

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  00065	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00068	c1 ea 08	 shr	 edx, 8
  0006b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00071	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  00074	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  00077	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 232  : 		pOutput[j+2] = (unsigned char)((pInput[i] >> 16) & 0xff);

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  00080	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00083	c1 ea 10	 shr	 edx, 16			; 00000010H
  00086	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0008c	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  0008f	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  00092	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 233  : 		pOutput[j+3] = (unsigned char)((pInput[i] >> 24) & 0xff);

  00095	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00098	8b 4d 0c	 mov	 ecx, DWORD PTR _pInput$[ebp]
  0009b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0009e	c1 ea 18	 shr	 edx, 24			; 00000018H
  000a1	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000a7	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  000aa	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  000ad	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 234  : 	}

  000b0	e9 79 ff ff ff	 jmp	 $LN2@Encode
$LN4@Encode:

; 235  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_Encode	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _MD5Transform
_TEXT	SEGMENT
_x$ = -120						; size = 64
_d$ = -48						; size = 4
_c$ = -36						; size = 4
_b$ = -24						; size = 4
_a$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_block$ = 12						; size = 4
_MD5Transform PROC					; COMDAT

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00012	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 240  : 	unsigned int a = state[0], b = state[1], c = state[2], d = state[3], x[16];

  00028	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	89 4d f4	 mov	 DWORD PTR _a$[ebp], ecx
  00030	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	89 4d e8	 mov	 DWORD PTR _b$[ebp], ecx
  00039	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  0003c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003f	89 4d dc	 mov	 DWORD PTR _c$[ebp], ecx
  00042	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00045	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00048	89 4d d0	 mov	 DWORD PTR _d$[ebp], ecx

; 241  : 	//整好512位64个字节
; 242  : 	//将64字节的数据块转为16个32位整数
; 243  : 	//MD5的这一步特别浪费速度，但是对于不同字节序确实是个问题
; 244  : 	//而且这里根本没有判断字节序，在非X86上可能就会失效
; 245  : 	Decode (x, block, 64);

  0004b	6a 40		 push	 64			; 00000040H
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _block$[ebp]
  00050	50		 push	 eax
  00051	8d 4d 88	 lea	 ecx, DWORD PTR _x$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 _Decode
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 246  : 	/* Round 1 */
; 247  : 	FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */

  0005d	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00060	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  00063	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00066	f7 d1		 not	 ecx
  00068	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  0006b	0b c1		 or	 eax, ecx
  0006d	03 45 88	 add	 eax, DWORD PTR _x$[ebp]
  00070	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  00073	8d 84 02 78 a4
	6a d7		 lea	 eax, DWORD PTR [edx+eax-680876936]
  0007a	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  0007d	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00080	c1 e0 07	 shl	 eax, 7
  00083	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00086	c1 e9 19	 shr	 ecx, 25			; 00000019H
  00089	0b c1		 or	 eax, ecx
  0008b	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  0008e	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00091	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00094	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 248  : 	FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */

  00097	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0009a	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  0009d	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  000a0	f7 d1		 not	 ecx
  000a2	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  000a5	0b c1		 or	 eax, ecx
  000a7	03 45 8c	 add	 eax, DWORD PTR _x$[ebp+4]
  000aa	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  000ad	8d 84 02 56 b7
	c7 e8		 lea	 eax, DWORD PTR [edx+eax-389564586]
  000b4	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  000b7	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  000ba	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  000bd	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  000c0	c1 e9 14	 shr	 ecx, 20			; 00000014H
  000c3	0b c1		 or	 eax, ecx
  000c5	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  000c8	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  000cb	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  000ce	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 249  : 	FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */

  000d1	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  000d4	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  000d7	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  000da	f7 d1		 not	 ecx
  000dc	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  000df	0b c1		 or	 eax, ecx
  000e1	03 45 90	 add	 eax, DWORD PTR _x$[ebp+8]
  000e4	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  000e7	8d 84 02 db 70
	20 24		 lea	 eax, DWORD PTR [edx+eax+606105819]
  000ee	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  000f1	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  000f4	c1 e0 11	 shl	 eax, 17			; 00000011H
  000f7	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  000fa	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  000fd	0b c1		 or	 eax, ecx
  000ff	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00102	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00105	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00108	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 250  : 	FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */

  0010b	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0010e	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  00111	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00114	f7 d1		 not	 ecx
  00116	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00119	0b c1		 or	 eax, ecx
  0011b	03 45 94	 add	 eax, DWORD PTR _x$[ebp+12]
  0011e	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  00121	8d 84 02 ee ce
	bd c1		 lea	 eax, DWORD PTR [edx+eax-1044525330]
  00128	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  0012b	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0012e	c1 e0 16	 shl	 eax, 22			; 00000016H
  00131	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00134	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00137	0b c1		 or	 eax, ecx
  00139	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  0013c	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0013f	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00142	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 251  : 
; 252  : 	FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */

  00145	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00148	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  0014b	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0014e	f7 d1		 not	 ecx
  00150	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  00153	0b c1		 or	 eax, ecx
  00155	03 45 98	 add	 eax, DWORD PTR _x$[ebp+16]
  00158	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  0015b	8d 84 02 af 0f
	7c f5		 lea	 eax, DWORD PTR [edx+eax-176418897]
  00162	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00165	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00168	c1 e0 07	 shl	 eax, 7
  0016b	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  0016e	c1 e9 19	 shr	 ecx, 25			; 00000019H
  00171	0b c1		 or	 eax, ecx
  00173	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00176	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00179	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  0017c	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 253  : 	FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */

  0017f	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00182	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  00185	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00188	f7 d1		 not	 ecx
  0018a	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  0018d	0b c1		 or	 eax, ecx
  0018f	03 45 9c	 add	 eax, DWORD PTR _x$[ebp+20]
  00192	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  00195	8d 84 02 2a c6
	87 47		 lea	 eax, DWORD PTR [edx+eax+1200080426]
  0019c	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  0019f	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  001a2	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  001a5	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  001a8	c1 e9 14	 shr	 ecx, 20			; 00000014H
  001ab	0b c1		 or	 eax, ecx
  001ad	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  001b0	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  001b3	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  001b6	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 254  : 	FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */

  001b9	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  001bc	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  001bf	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  001c2	f7 d1		 not	 ecx
  001c4	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  001c7	0b c1		 or	 eax, ecx
  001c9	03 45 a0	 add	 eax, DWORD PTR _x$[ebp+24]
  001cc	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  001cf	8d 84 02 13 46
	30 a8		 lea	 eax, DWORD PTR [edx+eax-1473231341]
  001d6	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  001d9	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  001dc	c1 e0 11	 shl	 eax, 17			; 00000011H
  001df	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  001e2	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  001e5	0b c1		 or	 eax, ecx
  001e7	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  001ea	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  001ed	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  001f0	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 255  : 	FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */

  001f3	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  001f6	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  001f9	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  001fc	f7 d1		 not	 ecx
  001fe	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00201	0b c1		 or	 eax, ecx
  00203	03 45 a4	 add	 eax, DWORD PTR _x$[ebp+28]
  00206	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  00209	8d 84 02 01 95
	46 fd		 lea	 eax, DWORD PTR [edx+eax-45705983]
  00210	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00213	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00216	c1 e0 16	 shl	 eax, 22			; 00000016H
  00219	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0021c	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0021f	0b c1		 or	 eax, ecx
  00221	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00224	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00227	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  0022a	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 256  : 
; 257  : 	FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */

  0022d	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00230	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  00233	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00236	f7 d1		 not	 ecx
  00238	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  0023b	0b c1		 or	 eax, ecx
  0023d	03 45 a8	 add	 eax, DWORD PTR _x$[ebp+32]
  00240	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  00243	8d 84 02 d8 98
	80 69		 lea	 eax, DWORD PTR [edx+eax+1770035416]
  0024a	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  0024d	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00250	c1 e0 07	 shl	 eax, 7
  00253	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00256	c1 e9 19	 shr	 ecx, 25			; 00000019H
  00259	0b c1		 or	 eax, ecx
  0025b	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  0025e	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00261	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00264	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 258  : 	FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */

  00267	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0026a	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  0026d	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00270	f7 d1		 not	 ecx
  00272	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  00275	0b c1		 or	 eax, ecx
  00277	03 45 ac	 add	 eax, DWORD PTR _x$[ebp+36]
  0027a	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  0027d	8d 84 02 af f7
	44 8b		 lea	 eax, DWORD PTR [edx+eax-1958414417]
  00284	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00287	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0028a	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  0028d	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00290	c1 e9 14	 shr	 ecx, 20			; 00000014H
  00293	0b c1		 or	 eax, ecx
  00295	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00298	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0029b	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  0029e	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 259  : 	FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */

  002a1	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  002a4	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  002a7	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  002aa	f7 d1		 not	 ecx
  002ac	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  002af	0b c1		 or	 eax, ecx
  002b1	03 45 b0	 add	 eax, DWORD PTR _x$[ebp+40]
  002b4	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  002b7	8d 84 02 b1 5b
	ff ff		 lea	 eax, DWORD PTR [edx+eax-42063]
  002be	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  002c1	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  002c4	c1 e0 11	 shl	 eax, 17			; 00000011H
  002c7	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  002ca	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  002cd	0b c1		 or	 eax, ecx
  002cf	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  002d2	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  002d5	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  002d8	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 260  : 	FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */

  002db	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  002de	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  002e1	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  002e4	f7 d1		 not	 ecx
  002e6	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  002e9	0b c1		 or	 eax, ecx
  002eb	03 45 b4	 add	 eax, DWORD PTR _x$[ebp+44]
  002ee	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  002f1	8d 84 02 be d7
	5c 89		 lea	 eax, DWORD PTR [edx+eax-1990404162]
  002f8	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  002fb	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  002fe	c1 e0 16	 shl	 eax, 22			; 00000016H
  00301	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00304	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00307	0b c1		 or	 eax, ecx
  00309	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  0030c	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0030f	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00312	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 261  : 
; 262  : 	FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */

  00315	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00318	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  0031b	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0031e	f7 d1		 not	 ecx
  00320	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  00323	0b c1		 or	 eax, ecx
  00325	03 45 b8	 add	 eax, DWORD PTR _x$[ebp+48]
  00328	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  0032b	8d 84 02 22 11
	90 6b		 lea	 eax, DWORD PTR [edx+eax+1804603682]
  00332	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00335	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00338	c1 e0 07	 shl	 eax, 7
  0033b	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  0033e	c1 e9 19	 shr	 ecx, 25			; 00000019H
  00341	0b c1		 or	 eax, ecx
  00343	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00346	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00349	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  0034c	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 263  : 	FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */

  0034f	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00352	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  00355	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00358	f7 d1		 not	 ecx
  0035a	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  0035d	0b c1		 or	 eax, ecx
  0035f	03 45 bc	 add	 eax, DWORD PTR _x$[ebp+52]
  00362	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  00365	8d 84 02 93 71
	98 fd		 lea	 eax, DWORD PTR [edx+eax-40341101]
  0036c	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  0036f	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00372	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  00375	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00378	c1 e9 14	 shr	 ecx, 20			; 00000014H
  0037b	0b c1		 or	 eax, ecx
  0037d	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00380	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00383	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00386	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 264  : 	FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */

  00389	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0038c	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  0038f	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00392	f7 d1		 not	 ecx
  00394	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  00397	0b c1		 or	 eax, ecx
  00399	03 45 c0	 add	 eax, DWORD PTR _x$[ebp+56]
  0039c	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  0039f	8d 84 02 8e 43
	79 a6		 lea	 eax, DWORD PTR [edx+eax-1502002290]
  003a6	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  003a9	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  003ac	c1 e0 11	 shl	 eax, 17			; 00000011H
  003af	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  003b2	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  003b5	0b c1		 or	 eax, ecx
  003b7	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  003ba	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  003bd	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  003c0	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 265  : 	FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */

  003c3	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  003c6	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  003c9	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  003cc	f7 d1		 not	 ecx
  003ce	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  003d1	0b c1		 or	 eax, ecx
  003d3	03 45 c4	 add	 eax, DWORD PTR _x$[ebp+60]
  003d6	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  003d9	8d 84 02 21 08
	b4 49		 lea	 eax, DWORD PTR [edx+eax+1236535329]
  003e0	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  003e3	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  003e6	c1 e0 16	 shl	 eax, 22			; 00000016H
  003e9	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  003ec	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  003ef	0b c1		 or	 eax, ecx
  003f1	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  003f4	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  003f7	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  003fa	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 266  : 
; 267  : 	/* Round 2 */
; 268  : 	GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */

  003fd	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00400	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  00403	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00406	f7 d1		 not	 ecx
  00408	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  0040b	0b c1		 or	 eax, ecx
  0040d	03 45 8c	 add	 eax, DWORD PTR _x$[ebp+4]
  00410	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  00413	8d 84 02 62 25
	1e f6		 lea	 eax, DWORD PTR [edx+eax-165796510]
  0041a	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  0041d	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00420	c1 e0 05	 shl	 eax, 5
  00423	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00426	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  00429	0b c1		 or	 eax, ecx
  0042b	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  0042e	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00431	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00434	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 269  : 	GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */

  00437	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0043a	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  0043d	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00440	f7 d1		 not	 ecx
  00442	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  00445	0b c1		 or	 eax, ecx
  00447	03 45 a0	 add	 eax, DWORD PTR _x$[ebp+24]
  0044a	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  0044d	8d 84 02 40 b3
	40 c0		 lea	 eax, DWORD PTR [edx+eax-1069501632]
  00454	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00457	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0045a	c1 e0 09	 shl	 eax, 9
  0045d	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00460	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00463	0b c1		 or	 eax, ecx
  00465	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00468	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0046b	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  0046e	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 270  : 	GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */

  00471	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00474	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  00477	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0047a	f7 d1		 not	 ecx
  0047c	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  0047f	0b c1		 or	 eax, ecx
  00481	03 45 b4	 add	 eax, DWORD PTR _x$[ebp+44]
  00484	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  00487	8d 84 02 51 5a
	5e 26		 lea	 eax, DWORD PTR [edx+eax+643717713]
  0048e	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00491	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00494	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00497	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  0049a	c1 e9 12	 shr	 ecx, 18			; 00000012H
  0049d	0b c1		 or	 eax, ecx
  0049f	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  004a2	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  004a5	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  004a8	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 271  : 	GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */

  004ab	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  004ae	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  004b1	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  004b4	f7 d1		 not	 ecx
  004b6	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  004b9	0b c1		 or	 eax, ecx
  004bb	03 45 88	 add	 eax, DWORD PTR _x$[ebp]
  004be	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  004c1	8d 84 02 aa c7
	b6 e9		 lea	 eax, DWORD PTR [edx+eax-373897302]
  004c8	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  004cb	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  004ce	c1 e0 14	 shl	 eax, 20			; 00000014H
  004d1	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  004d4	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  004d7	0b c1		 or	 eax, ecx
  004d9	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  004dc	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  004df	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  004e2	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 272  : 
; 273  : 	GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */

  004e5	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  004e8	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  004eb	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  004ee	f7 d1		 not	 ecx
  004f0	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  004f3	0b c1		 or	 eax, ecx
  004f5	03 45 9c	 add	 eax, DWORD PTR _x$[ebp+20]
  004f8	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  004fb	8d 84 02 5d 10
	2f d6		 lea	 eax, DWORD PTR [edx+eax-701558691]
  00502	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00505	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00508	c1 e0 05	 shl	 eax, 5
  0050b	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  0050e	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  00511	0b c1		 or	 eax, ecx
  00513	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00516	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00519	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  0051c	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 274  : 	GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */

  0051f	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00522	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  00525	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00528	f7 d1		 not	 ecx
  0052a	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  0052d	0b c1		 or	 eax, ecx
  0052f	03 45 b0	 add	 eax, DWORD PTR _x$[ebp+40]
  00532	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  00535	8d 84 02 53 14
	44 02		 lea	 eax, DWORD PTR [edx+eax+38016083]
  0053c	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  0053f	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00542	c1 e0 09	 shl	 eax, 9
  00545	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00548	c1 e9 17	 shr	 ecx, 23			; 00000017H
  0054b	0b c1		 or	 eax, ecx
  0054d	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00550	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00553	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00556	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 275  : 	GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */

  00559	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0055c	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  0055f	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00562	f7 d1		 not	 ecx
  00564	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00567	0b c1		 or	 eax, ecx
  00569	03 45 c4	 add	 eax, DWORD PTR _x$[ebp+60]
  0056c	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  0056f	8d 84 02 81 e6
	a1 d8		 lea	 eax, DWORD PTR [edx+eax-660478335]
  00576	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00579	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0057c	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  0057f	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00582	c1 e9 12	 shr	 ecx, 18			; 00000012H
  00585	0b c1		 or	 eax, ecx
  00587	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  0058a	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0058d	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00590	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 276  : 	GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */

  00593	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00596	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00599	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  0059c	f7 d1		 not	 ecx
  0059e	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  005a1	0b c1		 or	 eax, ecx
  005a3	03 45 98	 add	 eax, DWORD PTR _x$[ebp+16]
  005a6	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  005a9	8d 84 02 c8 fb
	d3 e7		 lea	 eax, DWORD PTR [edx+eax-405537848]
  005b0	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  005b3	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  005b6	c1 e0 14	 shl	 eax, 20			; 00000014H
  005b9	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  005bc	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  005bf	0b c1		 or	 eax, ecx
  005c1	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  005c4	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  005c7	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  005ca	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 277  : 
; 278  : 	GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */

  005cd	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  005d0	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  005d3	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  005d6	f7 d1		 not	 ecx
  005d8	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  005db	0b c1		 or	 eax, ecx
  005dd	03 45 ac	 add	 eax, DWORD PTR _x$[ebp+36]
  005e0	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  005e3	8d 84 02 e6 cd
	e1 21		 lea	 eax, DWORD PTR [edx+eax+568446438]
  005ea	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  005ed	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  005f0	c1 e0 05	 shl	 eax, 5
  005f3	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  005f6	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  005f9	0b c1		 or	 eax, ecx
  005fb	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  005fe	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00601	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00604	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 279  : 	GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */

  00607	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0060a	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  0060d	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00610	f7 d1		 not	 ecx
  00612	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  00615	0b c1		 or	 eax, ecx
  00617	03 45 c0	 add	 eax, DWORD PTR _x$[ebp+56]
  0061a	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  0061d	8d 84 02 d6 07
	37 c3		 lea	 eax, DWORD PTR [edx+eax-1019803690]
  00624	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00627	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0062a	c1 e0 09	 shl	 eax, 9
  0062d	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00630	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00633	0b c1		 or	 eax, ecx
  00635	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00638	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0063b	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  0063e	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 280  : 	GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */

  00641	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00644	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  00647	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0064a	f7 d1		 not	 ecx
  0064c	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  0064f	0b c1		 or	 eax, ecx
  00651	03 45 94	 add	 eax, DWORD PTR _x$[ebp+12]
  00654	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  00657	8d 84 02 87 0d
	d5 f4		 lea	 eax, DWORD PTR [edx+eax-187363961]
  0065e	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00661	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00664	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00667	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  0066a	c1 e9 12	 shr	 ecx, 18			; 00000012H
  0066d	0b c1		 or	 eax, ecx
  0066f	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00672	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00675	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00678	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 281  : 	GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */

  0067b	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0067e	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00681	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00684	f7 d1		 not	 ecx
  00686	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  00689	0b c1		 or	 eax, ecx
  0068b	03 45 a8	 add	 eax, DWORD PTR _x$[ebp+32]
  0068e	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  00691	8d 84 02 ed 14
	5a 45		 lea	 eax, DWORD PTR [edx+eax+1163531501]
  00698	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  0069b	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0069e	c1 e0 14	 shl	 eax, 20			; 00000014H
  006a1	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  006a4	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  006a7	0b c1		 or	 eax, ecx
  006a9	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  006ac	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  006af	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  006b2	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 282  : 
; 283  : 	GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */

  006b5	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  006b8	23 45 d0	 and	 eax, DWORD PTR _d$[ebp]
  006bb	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  006be	f7 d1		 not	 ecx
  006c0	23 4d dc	 and	 ecx, DWORD PTR _c$[ebp]
  006c3	0b c1		 or	 eax, ecx
  006c5	03 45 bc	 add	 eax, DWORD PTR _x$[ebp+52]
  006c8	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  006cb	8d 84 02 05 e9
	e3 a9		 lea	 eax, DWORD PTR [edx+eax-1444681467]
  006d2	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  006d5	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  006d8	c1 e0 05	 shl	 eax, 5
  006db	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  006de	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  006e1	0b c1		 or	 eax, ecx
  006e3	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  006e6	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  006e9	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  006ec	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 284  : 	GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */

  006ef	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  006f2	23 45 dc	 and	 eax, DWORD PTR _c$[ebp]
  006f5	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  006f8	f7 d1		 not	 ecx
  006fa	23 4d e8	 and	 ecx, DWORD PTR _b$[ebp]
  006fd	0b c1		 or	 eax, ecx
  006ff	03 45 90	 add	 eax, DWORD PTR _x$[ebp+8]
  00702	8b 55 d0	 mov	 edx, DWORD PTR _d$[ebp]
  00705	8d 84 02 f8 a3
	ef fc		 lea	 eax, DWORD PTR [edx+eax-51403784]
  0070c	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  0070f	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00712	c1 e0 09	 shl	 eax, 9
  00715	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00718	c1 e9 17	 shr	 ecx, 23			; 00000017H
  0071b	0b c1		 or	 eax, ecx
  0071d	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00720	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00723	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00726	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 285  : 	GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */

  00729	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0072c	23 45 e8	 and	 eax, DWORD PTR _b$[ebp]
  0072f	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00732	f7 d1		 not	 ecx
  00734	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00737	0b c1		 or	 eax, ecx
  00739	03 45 a4	 add	 eax, DWORD PTR _x$[ebp+28]
  0073c	8b 55 dc	 mov	 edx, DWORD PTR _c$[ebp]
  0073f	8d 84 02 d9 02
	6f 67		 lea	 eax, DWORD PTR [edx+eax+1735328473]
  00746	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00749	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0074c	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  0074f	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00752	c1 e9 12	 shr	 ecx, 18			; 00000012H
  00755	0b c1		 or	 eax, ecx
  00757	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  0075a	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0075d	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00760	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 286  : 	GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */

  00763	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00766	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00769	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  0076c	f7 d1		 not	 ecx
  0076e	23 4d d0	 and	 ecx, DWORD PTR _d$[ebp]
  00771	0b c1		 or	 eax, ecx
  00773	03 45 b8	 add	 eax, DWORD PTR _x$[ebp+48]
  00776	8b 55 e8	 mov	 edx, DWORD PTR _b$[ebp]
  00779	8d 84 02 8a 4c
	2a 8d		 lea	 eax, DWORD PTR [edx+eax-1926607734]
  00780	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00783	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00786	c1 e0 14	 shl	 eax, 20			; 00000014H
  00789	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  0078c	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  0078f	0b c1		 or	 eax, ecx
  00791	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00794	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00797	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  0079a	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 287  : 
; 288  : 	/* Round 3 */
; 289  : 	HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */

  0079d	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  007a0	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  007a3	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  007a6	03 45 9c	 add	 eax, DWORD PTR _x$[ebp+20]
  007a9	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  007ac	8d 94 01 42 39
	fa ff		 lea	 edx, DWORD PTR [ecx+eax-378558]
  007b3	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  007b6	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  007b9	c1 e0 04	 shl	 eax, 4
  007bc	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  007bf	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  007c2	0b c1		 or	 eax, ecx
  007c4	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  007c7	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  007ca	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  007cd	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 290  : 	HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */

  007d0	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  007d3	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  007d6	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  007d9	03 45 a8	 add	 eax, DWORD PTR _x$[ebp+32]
  007dc	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  007df	8d 94 01 81 f6
	71 87		 lea	 edx, DWORD PTR [ecx+eax-2022574463]
  007e6	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  007e9	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  007ec	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  007ef	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  007f2	c1 e9 15	 shr	 ecx, 21			; 00000015H
  007f5	0b c1		 or	 eax, ecx
  007f7	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  007fa	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  007fd	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00800	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 291  : 	HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */

  00803	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00806	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00809	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  0080c	03 45 b4	 add	 eax, DWORD PTR _x$[ebp+44]
  0080f	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00812	8d 94 01 22 61
	9d 6d		 lea	 edx, DWORD PTR [ecx+eax+1839030562]
  00819	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  0081c	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  0081f	c1 e0 10	 shl	 eax, 16			; 00000010H
  00822	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00825	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00828	0b c1		 or	 eax, ecx
  0082a	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  0082d	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00830	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00833	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 292  : 	HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */

  00836	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00839	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  0083c	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  0083f	03 45 c0	 add	 eax, DWORD PTR _x$[ebp+56]
  00842	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00845	8d 94 01 0c 38
	e5 fd		 lea	 edx, DWORD PTR [ecx+eax-35309556]
  0084c	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  0084f	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00852	c1 e0 17	 shl	 eax, 23			; 00000017H
  00855	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00858	c1 e9 09	 shr	 ecx, 9
  0085b	0b c1		 or	 eax, ecx
  0085d	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00860	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00863	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00866	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 293  : 
; 294  : 	HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */

  00869	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0086c	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  0086f	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00872	03 45 8c	 add	 eax, DWORD PTR _x$[ebp+4]
  00875	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00878	8d 94 01 44 ea
	be a4		 lea	 edx, DWORD PTR [ecx+eax-1530992060]
  0087f	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00882	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00885	c1 e0 04	 shl	 eax, 4
  00888	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  0088b	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  0088e	0b c1		 or	 eax, ecx
  00890	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00893	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00896	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00899	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 295  : 	HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */

  0089c	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0089f	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  008a2	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  008a5	03 45 98	 add	 eax, DWORD PTR _x$[ebp+16]
  008a8	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  008ab	8d 94 01 a9 cf
	de 4b		 lea	 edx, DWORD PTR [ecx+eax+1272893353]
  008b2	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  008b5	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  008b8	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  008bb	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  008be	c1 e9 15	 shr	 ecx, 21			; 00000015H
  008c1	0b c1		 or	 eax, ecx
  008c3	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  008c6	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  008c9	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  008cc	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 296  : 	HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */

  008cf	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  008d2	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  008d5	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  008d8	03 45 a4	 add	 eax, DWORD PTR _x$[ebp+28]
  008db	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  008de	8d 94 01 60 4b
	bb f6		 lea	 edx, DWORD PTR [ecx+eax-155497632]
  008e5	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  008e8	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  008eb	c1 e0 10	 shl	 eax, 16			; 00000010H
  008ee	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  008f1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  008f4	0b c1		 or	 eax, ecx
  008f6	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  008f9	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  008fc	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  008ff	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 297  : 	HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */

  00902	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00905	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00908	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  0090b	03 45 b0	 add	 eax, DWORD PTR _x$[ebp+40]
  0090e	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00911	8d 94 01 70 bc
	bf be		 lea	 edx, DWORD PTR [ecx+eax-1094730640]
  00918	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  0091b	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0091e	c1 e0 17	 shl	 eax, 23			; 00000017H
  00921	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00924	c1 e9 09	 shr	 ecx, 9
  00927	0b c1		 or	 eax, ecx
  00929	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  0092c	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0092f	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00932	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 298  : 
; 299  : 	HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */

  00935	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00938	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  0093b	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  0093e	03 45 bc	 add	 eax, DWORD PTR _x$[ebp+52]
  00941	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00944	8d 94 01 c6 7e
	9b 28		 lea	 edx, DWORD PTR [ecx+eax+681279174]
  0094b	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  0094e	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00951	c1 e0 04	 shl	 eax, 4
  00954	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00957	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  0095a	0b c1		 or	 eax, ecx
  0095c	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  0095f	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00962	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00965	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 300  : 	HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */

  00968	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0096b	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  0096e	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00971	03 45 88	 add	 eax, DWORD PTR _x$[ebp]
  00974	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00977	8d 94 01 fa 27
	a1 ea		 lea	 edx, DWORD PTR [ecx+eax-358537222]
  0097e	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00981	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00984	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00987	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  0098a	c1 e9 15	 shr	 ecx, 21			; 00000015H
  0098d	0b c1		 or	 eax, ecx
  0098f	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00992	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00995	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00998	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 301  : 	HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */

  0099b	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  0099e	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  009a1	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  009a4	03 45 94	 add	 eax, DWORD PTR _x$[ebp+12]
  009a7	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  009aa	8d 94 01 85 30
	ef d4		 lea	 edx, DWORD PTR [ecx+eax-722521979]
  009b1	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  009b4	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  009b7	c1 e0 10	 shl	 eax, 16			; 00000010H
  009ba	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  009bd	c1 e9 10	 shr	 ecx, 16			; 00000010H
  009c0	0b c1		 or	 eax, ecx
  009c2	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  009c5	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  009c8	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  009cb	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 302  : 	HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */

  009ce	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  009d1	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  009d4	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  009d7	03 45 a0	 add	 eax, DWORD PTR _x$[ebp+24]
  009da	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  009dd	8d 94 01 05 1d
	88 04		 lea	 edx, DWORD PTR [ecx+eax+76029189]
  009e4	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  009e7	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  009ea	c1 e0 17	 shl	 eax, 23			; 00000017H
  009ed	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  009f0	c1 e9 09	 shr	 ecx, 9
  009f3	0b c1		 or	 eax, ecx
  009f5	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  009f8	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  009fb	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  009fe	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 303  : 
; 304  : 	HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */

  00a01	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00a04	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00a07	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00a0a	03 45 ac	 add	 eax, DWORD PTR _x$[ebp+36]
  00a0d	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00a10	8d 94 01 39 d0
	d4 d9		 lea	 edx, DWORD PTR [ecx+eax-640364487]
  00a17	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00a1a	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00a1d	c1 e0 04	 shl	 eax, 4
  00a20	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00a23	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00a26	0b c1		 or	 eax, ecx
  00a28	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00a2b	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00a2e	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00a31	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 305  : 	HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */

  00a34	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00a37	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00a3a	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00a3d	03 45 b8	 add	 eax, DWORD PTR _x$[ebp+48]
  00a40	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00a43	8d 94 01 e5 99
	db e6		 lea	 edx, DWORD PTR [ecx+eax-421815835]
  00a4a	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00a4d	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00a50	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00a53	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00a56	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00a59	0b c1		 or	 eax, ecx
  00a5b	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00a5e	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00a61	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00a64	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 306  : 	HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */

  00a67	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00a6a	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00a6d	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00a70	03 45 c4	 add	 eax, DWORD PTR _x$[ebp+60]
  00a73	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00a76	8d 94 01 f8 7c
	a2 1f		 lea	 edx, DWORD PTR [ecx+eax+530742520]
  00a7d	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00a80	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00a83	c1 e0 10	 shl	 eax, 16			; 00000010H
  00a86	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00a89	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a8c	0b c1		 or	 eax, ecx
  00a8e	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00a91	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00a94	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00a97	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 307  : 	HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */

  00a9a	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00a9d	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00aa0	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00aa3	03 45 90	 add	 eax, DWORD PTR _x$[ebp+8]
  00aa6	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00aa9	8d 94 01 65 56
	ac c4		 lea	 edx, DWORD PTR [ecx+eax-995338651]
  00ab0	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  00ab3	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00ab6	c1 e0 17	 shl	 eax, 23			; 00000017H
  00ab9	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00abc	c1 e9 09	 shr	 ecx, 9
  00abf	0b c1		 or	 eax, ecx
  00ac1	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00ac4	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00ac7	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00aca	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 308  : 
; 309  : 	/* Round 4 */
; 310  : 	II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */

  00acd	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00ad0	f7 d0		 not	 eax
  00ad2	0b 45 e8	 or	 eax, DWORD PTR _b$[ebp]
  00ad5	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00ad8	03 45 88	 add	 eax, DWORD PTR _x$[ebp]
  00adb	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00ade	8d 94 01 44 22
	29 f4		 lea	 edx, DWORD PTR [ecx+eax-198630844]
  00ae5	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00ae8	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00aeb	c1 e0 06	 shl	 eax, 6
  00aee	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00af1	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00af4	0b c1		 or	 eax, ecx
  00af6	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00af9	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00afc	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00aff	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 311  : 	II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */

  00b02	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00b05	f7 d0		 not	 eax
  00b07	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00b0a	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00b0d	03 45 a4	 add	 eax, DWORD PTR _x$[ebp+28]
  00b10	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00b13	8d 94 01 97 ff
	2a 43		 lea	 edx, DWORD PTR [ecx+eax+1126891415]
  00b1a	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00b1d	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00b20	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00b23	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00b26	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00b29	0b c1		 or	 eax, ecx
  00b2b	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00b2e	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00b31	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00b34	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 312  : 	II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */

  00b37	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00b3a	f7 d0		 not	 eax
  00b3c	0b 45 d0	 or	 eax, DWORD PTR _d$[ebp]
  00b3f	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00b42	03 45 c0	 add	 eax, DWORD PTR _x$[ebp+56]
  00b45	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00b48	8d 94 01 a7 23
	94 ab		 lea	 edx, DWORD PTR [ecx+eax-1416354905]
  00b4f	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00b52	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00b55	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00b58	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00b5b	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00b5e	0b c1		 or	 eax, ecx
  00b60	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00b63	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00b66	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00b69	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 313  : 	II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */

  00b6c	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00b6f	f7 d0		 not	 eax
  00b71	0b 45 dc	 or	 eax, DWORD PTR _c$[ebp]
  00b74	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00b77	03 45 9c	 add	 eax, DWORD PTR _x$[ebp+20]
  00b7a	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00b7d	8d 94 01 39 a0
	93 fc		 lea	 edx, DWORD PTR [ecx+eax-57434055]
  00b84	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  00b87	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00b8a	c1 e0 15	 shl	 eax, 21			; 00000015H
  00b8d	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00b90	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00b93	0b c1		 or	 eax, ecx
  00b95	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00b98	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00b9b	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00b9e	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 314  : 
; 315  : 	II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */

  00ba1	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00ba4	f7 d0		 not	 eax
  00ba6	0b 45 e8	 or	 eax, DWORD PTR _b$[ebp]
  00ba9	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00bac	03 45 b8	 add	 eax, DWORD PTR _x$[ebp+48]
  00baf	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00bb2	8d 94 01 c3 59
	5b 65		 lea	 edx, DWORD PTR [ecx+eax+1700485571]
  00bb9	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00bbc	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00bbf	c1 e0 06	 shl	 eax, 6
  00bc2	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00bc5	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00bc8	0b c1		 or	 eax, ecx
  00bca	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00bcd	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00bd0	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00bd3	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 316  : 	II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */

  00bd6	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00bd9	f7 d0		 not	 eax
  00bdb	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00bde	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00be1	03 45 94	 add	 eax, DWORD PTR _x$[ebp+12]
  00be4	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00be7	8d 94 01 92 cc
	0c 8f		 lea	 edx, DWORD PTR [ecx+eax-1894986606]
  00bee	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00bf1	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00bf4	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00bf7	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00bfa	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00bfd	0b c1		 or	 eax, ecx
  00bff	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00c02	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00c05	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00c08	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 317  : 	II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */

  00c0b	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00c0e	f7 d0		 not	 eax
  00c10	0b 45 d0	 or	 eax, DWORD PTR _d$[ebp]
  00c13	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00c16	03 45 b0	 add	 eax, DWORD PTR _x$[ebp+40]
  00c19	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00c1c	8d 94 01 7d f4
	ef ff		 lea	 edx, DWORD PTR [ecx+eax-1051523]
  00c23	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00c26	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00c29	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00c2c	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00c2f	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00c32	0b c1		 or	 eax, ecx
  00c34	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00c37	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00c3a	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00c3d	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 318  : 	II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */

  00c40	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00c43	f7 d0		 not	 eax
  00c45	0b 45 dc	 or	 eax, DWORD PTR _c$[ebp]
  00c48	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00c4b	03 45 8c	 add	 eax, DWORD PTR _x$[ebp+4]
  00c4e	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00c51	8d 94 01 d1 5d
	84 85		 lea	 edx, DWORD PTR [ecx+eax-2054922799]
  00c58	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  00c5b	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00c5e	c1 e0 15	 shl	 eax, 21			; 00000015H
  00c61	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00c64	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00c67	0b c1		 or	 eax, ecx
  00c69	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00c6c	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00c6f	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00c72	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 319  : 
; 320  : 	II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */

  00c75	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00c78	f7 d0		 not	 eax
  00c7a	0b 45 e8	 or	 eax, DWORD PTR _b$[ebp]
  00c7d	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00c80	03 45 a8	 add	 eax, DWORD PTR _x$[ebp+32]
  00c83	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00c86	8d 94 01 4f 7e
	a8 6f		 lea	 edx, DWORD PTR [ecx+eax+1873313359]
  00c8d	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00c90	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00c93	c1 e0 06	 shl	 eax, 6
  00c96	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00c99	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00c9c	0b c1		 or	 eax, ecx
  00c9e	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00ca1	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00ca4	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00ca7	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 321  : 	II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */

  00caa	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00cad	f7 d0		 not	 eax
  00caf	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00cb2	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00cb5	03 45 c4	 add	 eax, DWORD PTR _x$[ebp+60]
  00cb8	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00cbb	8d 94 01 e0 e6
	2c fe		 lea	 edx, DWORD PTR [ecx+eax-30611744]
  00cc2	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00cc5	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00cc8	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00ccb	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00cce	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00cd1	0b c1		 or	 eax, ecx
  00cd3	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00cd6	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00cd9	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00cdc	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 322  : 	II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */

  00cdf	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00ce2	f7 d0		 not	 eax
  00ce4	0b 45 d0	 or	 eax, DWORD PTR _d$[ebp]
  00ce7	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00cea	03 45 a0	 add	 eax, DWORD PTR _x$[ebp+24]
  00ced	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00cf0	8d 94 01 14 43
	01 a3		 lea	 edx, DWORD PTR [ecx+eax-1560198380]
  00cf7	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00cfa	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00cfd	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00d00	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00d03	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00d06	0b c1		 or	 eax, ecx
  00d08	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00d0b	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00d0e	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00d11	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 323  : 	II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */

  00d14	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00d17	f7 d0		 not	 eax
  00d19	0b 45 dc	 or	 eax, DWORD PTR _c$[ebp]
  00d1c	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00d1f	03 45 bc	 add	 eax, DWORD PTR _x$[ebp+52]
  00d22	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00d25	8d 94 01 a1 11
	08 4e		 lea	 edx, DWORD PTR [ecx+eax+1309151649]
  00d2c	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  00d2f	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00d32	c1 e0 15	 shl	 eax, 21			; 00000015H
  00d35	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00d38	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00d3b	0b c1		 or	 eax, ecx
  00d3d	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00d40	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00d43	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00d46	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 324  : 
; 325  : 	II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */

  00d49	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00d4c	f7 d0		 not	 eax
  00d4e	0b 45 e8	 or	 eax, DWORD PTR _b$[ebp]
  00d51	33 45 dc	 xor	 eax, DWORD PTR _c$[ebp]
  00d54	03 45 98	 add	 eax, DWORD PTR _x$[ebp+16]
  00d57	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00d5a	8d 94 01 82 7e
	53 f7		 lea	 edx, DWORD PTR [ecx+eax-145523070]
  00d61	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00d64	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00d67	c1 e0 06	 shl	 eax, 6
  00d6a	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00d6d	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00d70	0b c1		 or	 eax, ecx
  00d72	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00d75	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00d78	03 45 e8	 add	 eax, DWORD PTR _b$[ebp]
  00d7b	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 326  : 	II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */

  00d7e	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00d81	f7 d0		 not	 eax
  00d83	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00d86	33 45 e8	 xor	 eax, DWORD PTR _b$[ebp]
  00d89	03 45 b4	 add	 eax, DWORD PTR _x$[ebp+44]
  00d8c	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00d8f	8d 94 01 35 f2
	3a bd		 lea	 edx, DWORD PTR [ecx+eax-1120210379]
  00d96	89 55 d0	 mov	 DWORD PTR _d$[ebp], edx
  00d99	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00d9c	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00d9f	8b 4d d0	 mov	 ecx, DWORD PTR _d$[ebp]
  00da2	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00da5	0b c1		 or	 eax, ecx
  00da7	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax
  00daa	8b 45 d0	 mov	 eax, DWORD PTR _d$[ebp]
  00dad	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00db0	89 45 d0	 mov	 DWORD PTR _d$[ebp], eax

; 327  : 	II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */

  00db3	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00db6	f7 d0		 not	 eax
  00db8	0b 45 d0	 or	 eax, DWORD PTR _d$[ebp]
  00dbb	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00dbe	03 45 90	 add	 eax, DWORD PTR _x$[ebp+8]
  00dc1	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00dc4	8d 94 01 bb d2
	d7 2a		 lea	 edx, DWORD PTR [ecx+eax+718787259]
  00dcb	89 55 dc	 mov	 DWORD PTR _c$[ebp], edx
  00dce	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00dd1	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00dd4	8b 4d dc	 mov	 ecx, DWORD PTR _c$[ebp]
  00dd7	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00dda	0b c1		 or	 eax, ecx
  00ddc	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax
  00ddf	8b 45 dc	 mov	 eax, DWORD PTR _c$[ebp]
  00de2	03 45 d0	 add	 eax, DWORD PTR _d$[ebp]
  00de5	89 45 dc	 mov	 DWORD PTR _c$[ebp], eax

; 328  : 	II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */

  00de8	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00deb	f7 d0		 not	 eax
  00ded	0b 45 dc	 or	 eax, DWORD PTR _c$[ebp]
  00df0	33 45 d0	 xor	 eax, DWORD PTR _d$[ebp]
  00df3	03 45 ac	 add	 eax, DWORD PTR _x$[ebp+36]
  00df6	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00df9	8d 94 01 91 d3
	86 eb		 lea	 edx, DWORD PTR [ecx+eax-343485551]
  00e00	89 55 e8	 mov	 DWORD PTR _b$[ebp], edx
  00e03	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00e06	c1 e0 15	 shl	 eax, 21			; 00000015H
  00e09	8b 4d e8	 mov	 ecx, DWORD PTR _b$[ebp]
  00e0c	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00e0f	0b c1		 or	 eax, ecx
  00e11	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax
  00e14	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  00e17	03 45 dc	 add	 eax, DWORD PTR _c$[ebp]
  00e1a	89 45 e8	 mov	 DWORD PTR _b$[ebp], eax

; 329  : 
; 330  : 	state[0] += a;

  00e1d	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00e20	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e22	03 4d f4	 add	 ecx, DWORD PTR _a$[ebp]
  00e25	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00e28	89 0a		 mov	 DWORD PTR [edx], ecx

; 331  : 	state[1] += b;

  00e2a	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00e2d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e30	03 4d e8	 add	 ecx, DWORD PTR _b$[ebp]
  00e33	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00e36	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 332  : 	state[2] += c;

  00e39	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00e3c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00e3f	03 4d dc	 add	 ecx, DWORD PTR _c$[ebp]
  00e42	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00e45	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 333  : 	state[3] += d;

  00e48	8b 45 08	 mov	 eax, DWORD PTR _state$[ebp]
  00e4b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00e4e	03 4d d0	 add	 ecx, DWORD PTR _d$[ebp]
  00e51	8b 55 08	 mov	 edx, DWORD PTR _state$[ebp]
  00e54	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 334  : 	//将临时变量清0,有必要吗?
; 335  : 	//MD5_memset ((POINTER)x, 0, sizeof (x));
; 336  : 	memset(x,0,sizeof(x));//Croky 可以注释

  00e57	6a 40		 push	 64			; 00000040H
  00e59	6a 00		 push	 0
  00e5b	8d 45 88	 lea	 eax, DWORD PTR _x$[ebp]
  00e5e	50		 push	 eax
  00e5f	e8 00 00 00 00	 call	 _memset
  00e64	83 c4 0c	 add	 esp, 12			; 0000000cH

; 337  : }

  00e67	52		 push	 edx
  00e68	8b cd		 mov	 ecx, ebp
  00e6a	50		 push	 eax
  00e6b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@MD5Transfo
  00e71	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00e76	58		 pop	 eax
  00e77	5a		 pop	 edx
  00e78	5f		 pop	 edi
  00e79	5e		 pop	 esi
  00e7a	5b		 pop	 ebx
  00e7b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e7e	33 cd		 xor	 ecx, ebp
  00e80	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e85	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00e8b	3b ec		 cmp	 ebp, esp
  00e8d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e92	8b e5		 mov	 esp, ebp
  00e94	5d		 pop	 ebp
  00e95	c3		 ret	 0
  00e96	8b ff		 npad	 2
$LN5@MD5Transfo:
  00e98	01 00 00 00	 DD	 1
  00e9c	00 00 00 00	 DD	 $LN4@MD5Transfo
$LN4@MD5Transfo:
  00ea0	88 ff ff ff	 DD	 -120			; ffffff88H
  00ea4	40 00 00 00	 DD	 64			; 00000040H
  00ea8	00 00 00 00	 DD	 $LN3@MD5Transfo
$LN3@MD5Transfo:
  00eac	78		 DB	 120			; 00000078H
  00ead	00		 DB	 0
_MD5Transform ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _Decode
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_pOutput$ = 8						; size = 4
_pInput$ = 12						; size = 4
_nLen$ = 16						; size = 4
_Decode	PROC						; COMDAT

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 213  : 	unsigned int i, j;
; 214  : 	for (i = 0, j = 0; j < nLen; i++, j += 4)

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0002c	eb 12		 jmp	 SHORT $LN3@Decode
$LN2@Decode:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _j$[ebp]
  0003a	83 c1 04	 add	 ecx, 4
  0003d	89 4d ec	 mov	 DWORD PTR _j$[ebp], ecx
$LN3@Decode:
  00040	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00043	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00046	73 41		 jae	 SHORT $LN4@Decode

; 215  : 	{
; 216  : 		pOutput[i] = ((unsigned int)pInput[j]) | 
; 217  : 			(((unsigned int)pInput[j+1]) << 8) |
; 218  : 			(((unsigned int)pInput[j+2]) << 16) | 
; 219  : 			(((unsigned int)pInput[j+3]) << 24);

  00048	8b 45 0c	 mov	 eax, DWORD PTR _pInput$[ebp]
  0004b	03 45 ec	 add	 eax, DWORD PTR _j$[ebp]
  0004e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00051	8b 55 0c	 mov	 edx, DWORD PTR _pInput$[ebp]
  00054	03 55 ec	 add	 edx, DWORD PTR _j$[ebp]
  00057	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0005b	c1 e0 08	 shl	 eax, 8
  0005e	0b c8		 or	 ecx, eax
  00060	8b 55 0c	 mov	 edx, DWORD PTR _pInput$[ebp]
  00063	03 55 ec	 add	 edx, DWORD PTR _j$[ebp]
  00066	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0006a	c1 e0 10	 shl	 eax, 16			; 00000010H
  0006d	0b c8		 or	 ecx, eax
  0006f	8b 55 0c	 mov	 edx, DWORD PTR _pInput$[ebp]
  00072	03 55 ec	 add	 edx, DWORD PTR _j$[ebp]
  00075	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00079	c1 e0 18	 shl	 eax, 24			; 00000018H
  0007c	0b c8		 or	 ecx, eax
  0007e	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00081	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  00084	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 220  : 	}

  00087	eb a5		 jmp	 SHORT $LN2@Decode
$LN4@Decode:

; 221  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_Decode	ENDP
_TEXT	ENDS
END
